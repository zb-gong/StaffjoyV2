// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: company.proto

package company

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Company struct {
	Uuid                 string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Archived             bool   `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty" db:"archived"`
	DefaultTimezone      string `protobuf:"bytes,4,opt,name=default_timezone,json=defaultTimezone,proto3" json:"default_timezone,omitempty" db:"default_timezone"`
	DefaultDayWeekStarts string `protobuf:"bytes,5,opt,name=default_day_week_starts,json=defaultDayWeekStarts,proto3" json:"default_day_week_starts,omitempty" db:"default_day_week_starts"`
	Version              int32  `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{0}
}
func (m *Company) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Company.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return m.Size()
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Company) GetDefaultTimezone() string {
	if m != nil {
		return m.DefaultTimezone
	}
	return ""
}

func (m *Company) GetDefaultDayWeekStarts() string {
	if m != nil {
		return m.DefaultDayWeekStarts
	}
	return ""
}

func (m *Company) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CompanyList struct {
	Companies []Company `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies"`
	Limit     int32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32     `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *CompanyList) Reset()         { *m = CompanyList{} }
func (m *CompanyList) String() string { return proto.CompactTextString(m) }
func (*CompanyList) ProtoMessage()    {}
func (*CompanyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{1}
}
func (m *CompanyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompanyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompanyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyList.Merge(m, src)
}
func (m *CompanyList) XXX_Size() int {
	return m.Size()
}
func (m *CompanyList) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyList.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyList proto.InternalMessageInfo

func (m *CompanyList) GetCompanies() []Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *CompanyList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CompanyList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type CompanyListRequest struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *CompanyListRequest) Reset()         { *m = CompanyListRequest{} }
func (m *CompanyListRequest) String() string { return proto.CompactTextString(m) }
func (*CompanyListRequest) ProtoMessage()    {}
func (*CompanyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{2}
}
func (m *CompanyListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompanyListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompanyListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyListRequest.Merge(m, src)
}
func (m *CompanyListRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompanyListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyListRequest proto.InternalMessageInfo

func (m *CompanyListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CompanyListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CreateCompanyRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultTimezone      string `protobuf:"bytes,2,opt,name=default_timezone,json=defaultTimezone,proto3" json:"default_timezone,omitempty"`
	DefaultDayWeekStarts string `protobuf:"bytes,3,opt,name=default_day_week_starts,json=defaultDayWeekStarts,proto3" json:"default_day_week_starts,omitempty"`
}

func (m *CreateCompanyRequest) Reset()         { *m = CreateCompanyRequest{} }
func (m *CreateCompanyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCompanyRequest) ProtoMessage()    {}
func (*CreateCompanyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{3}
}
func (m *CreateCompanyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCompanyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCompanyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCompanyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCompanyRequest.Merge(m, src)
}
func (m *CreateCompanyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCompanyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCompanyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCompanyRequest proto.InternalMessageInfo

func (m *CreateCompanyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCompanyRequest) GetDefaultTimezone() string {
	if m != nil {
		return m.DefaultTimezone
	}
	return ""
}

func (m *CreateCompanyRequest) GetDefaultDayWeekStarts() string {
	if m != nil {
		return m.DefaultDayWeekStarts
	}
	return ""
}

type GetCompanyRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetCompanyRequest) Reset()         { *m = GetCompanyRequest{} }
func (m *GetCompanyRequest) String() string { return proto.CompactTextString(m) }
func (*GetCompanyRequest) ProtoMessage()    {}
func (*GetCompanyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{4}
}
func (m *GetCompanyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCompanyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCompanyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCompanyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCompanyRequest.Merge(m, src)
}
func (m *GetCompanyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCompanyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCompanyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCompanyRequest proto.InternalMessageInfo

func (m *GetCompanyRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type RowsOfCompany struct {
	CompanyUuid []string `protobuf:"bytes,1,rep,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *RowsOfCompany) Reset()         { *m = RowsOfCompany{} }
func (m *RowsOfCompany) String() string { return proto.CompactTextString(m) }
func (*RowsOfCompany) ProtoMessage()    {}
func (*RowsOfCompany) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{5}
}
func (m *RowsOfCompany) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowsOfCompany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowsOfCompany.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowsOfCompany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowsOfCompany.Merge(m, src)
}
func (m *RowsOfCompany) XXX_Size() int {
	return m.Size()
}
func (m *RowsOfCompany) XXX_DiscardUnknown() {
	xxx_messageInfo_RowsOfCompany.DiscardUnknown(m)
}

var xxx_messageInfo_RowsOfCompany proto.InternalMessageInfo

func (m *RowsOfCompany) GetCompanyUuid() []string {
	if m != nil {
		return m.CompanyUuid
	}
	return nil
}

type GetCompanyVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetCompanyVersionRequest) Reset()         { *m = GetCompanyVersionRequest{} }
func (m *GetCompanyVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetCompanyVersionRequest) ProtoMessage()    {}
func (*GetCompanyVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{6}
}
func (m *GetCompanyVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCompanyVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCompanyVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCompanyVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCompanyVersionRequest.Merge(m, src)
}
func (m *GetCompanyVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCompanyVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCompanyVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCompanyVersionRequest proto.InternalMessageInfo

func (m *GetCompanyVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type CompanyVersion struct {
	CompanyVer int32 `protobuf:"varint,1,opt,name=company_ver,json=companyVer,proto3" json:"company_ver,omitempty"`
}

func (m *CompanyVersion) Reset()         { *m = CompanyVersion{} }
func (m *CompanyVersion) String() string { return proto.CompactTextString(m) }
func (*CompanyVersion) ProtoMessage()    {}
func (*CompanyVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{7}
}
func (m *CompanyVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompanyVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompanyVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompanyVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyVersion.Merge(m, src)
}
func (m *CompanyVersion) XXX_Size() int {
	return m.Size()
}
func (m *CompanyVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyVersion.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyVersion proto.InternalMessageInfo

func (m *CompanyVersion) GetCompanyVer() int32 {
	if m != nil {
		return m.CompanyVer
	}
	return 0
}

type Team struct {
	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	CompanyUuid   string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty" db:"company_uuid"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Archived      bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty" db:"archived"`
	Timezone      string `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty" db:"timezone"`
	DayWeekStarts string `protobuf:"bytes,6,opt,name=day_week_starts,json=dayWeekStarts,proto3" json:"day_week_starts,omitempty" db:"day_week_starts"`
	Color         string `protobuf:"bytes,7,opt,name=color,proto3" json:"color,omitempty" db:"color"`
	Version       int32  `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{8}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Team) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Team) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Team) GetDayWeekStarts() string {
	if m != nil {
		return m.DayWeekStarts
	}
	return ""
}

func (m *Team) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Team) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CreateTeamRequest struct {
	CompanyUuid   string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Timezone      string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
	DayWeekStarts string `protobuf:"bytes,4,opt,name=day_week_starts,json=dayWeekStarts,proto3" json:"day_week_starts,omitempty"`
	Color         string `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *CreateTeamRequest) Reset()         { *m = CreateTeamRequest{} }
func (m *CreateTeamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTeamRequest) ProtoMessage()    {}
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{9}
}
func (m *CreateTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTeamRequest.Merge(m, src)
}
func (m *CreateTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTeamRequest proto.InternalMessageInfo

func (m *CreateTeamRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateTeamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTeamRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CreateTeamRequest) GetDayWeekStarts() string {
	if m != nil {
		return m.DayWeekStarts
	}
	return ""
}

func (m *CreateTeamRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type GetTeamRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetTeamRequest) Reset()         { *m = GetTeamRequest{} }
func (m *GetTeamRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamRequest) ProtoMessage()    {}
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{10}
}
func (m *GetTeamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamRequest.Merge(m, src)
}
func (m *GetTeamRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamRequest proto.InternalMessageInfo

func (m *GetTeamRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *GetTeamRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type TeamList struct {
	Teams   []Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{11}
}
func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return m.Size()
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

func (m *TeamList) GetTeams() []Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *TeamList) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type TeamListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *TeamListRequest) Reset()         { *m = TeamListRequest{} }
func (m *TeamListRequest) String() string { return proto.CompactTextString(m) }
func (*TeamListRequest) ProtoMessage()    {}
func (*TeamListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{12}
}
func (m *TeamListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamListRequest.Merge(m, src)
}
func (m *TeamListRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeamListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamListRequest proto.InternalMessageInfo

func (m *TeamListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type GetTeamVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetTeamVersionRequest) Reset()         { *m = GetTeamVersionRequest{} }
func (m *GetTeamVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamVersionRequest) ProtoMessage()    {}
func (*GetTeamVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{13}
}
func (m *GetTeamVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamVersionRequest.Merge(m, src)
}
func (m *GetTeamVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamVersionRequest proto.InternalMessageInfo

func (m *GetTeamVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type TeamVersion struct {
	TeamVer int32 `protobuf:"varint,1,opt,name=team_ver,json=teamVer,proto3" json:"team_ver,omitempty"`
}

func (m *TeamVersion) Reset()         { *m = TeamVersion{} }
func (m *TeamVersion) String() string { return proto.CompactTextString(m) }
func (*TeamVersion) ProtoMessage()    {}
func (*TeamVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{14}
}
func (m *TeamVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamVersion.Merge(m, src)
}
func (m *TeamVersion) XXX_Size() int {
	return m.Size()
}
func (m *TeamVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamVersion.DiscardUnknown(m)
}

var xxx_messageInfo_TeamVersion proto.InternalMessageInfo

func (m *TeamVersion) GetTeamVer() int32 {
	if m != nil {
		return m.TeamVer
	}
	return 0
}

type GetTeamsVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetTeamsVersionRequest) Reset()         { *m = GetTeamsVersionRequest{} }
func (m *GetTeamsVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetTeamsVersionRequest) ProtoMessage()    {}
func (*GetTeamsVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{15}
}
func (m *GetTeamsVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeamsVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeamsVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeamsVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeamsVersionRequest.Merge(m, src)
}
func (m *GetTeamsVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeamsVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeamsVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeamsVersionRequest proto.InternalMessageInfo

func (m *GetTeamsVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type TeamsVersion struct {
	TeamsVer int32 `protobuf:"varint,1,opt,name=teams_ver,json=teamsVer,proto3" json:"teams_ver,omitempty"`
}

func (m *TeamsVersion) Reset()         { *m = TeamsVersion{} }
func (m *TeamsVersion) String() string { return proto.CompactTextString(m) }
func (*TeamsVersion) ProtoMessage()    {}
func (*TeamsVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{16}
}
func (m *TeamsVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamsVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamsVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamsVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamsVersion.Merge(m, src)
}
func (m *TeamsVersion) XXX_Size() int {
	return m.Size()
}
func (m *TeamsVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamsVersion.DiscardUnknown(m)
}

var xxx_messageInfo_TeamsVersion proto.InternalMessageInfo

func (m *TeamsVersion) GetTeamsVer() int32 {
	if m != nil {
		return m.TeamsVer
	}
	return 0
}

type GetWorkerTeamVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetWorkerTeamVersionRequest) Reset()         { *m = GetWorkerTeamVersionRequest{} }
func (m *GetWorkerTeamVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkerTeamVersionRequest) ProtoMessage()    {}
func (*GetWorkerTeamVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{17}
}
func (m *GetWorkerTeamVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerTeamVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerTeamVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerTeamVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerTeamVersionRequest.Merge(m, src)
}
func (m *GetWorkerTeamVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerTeamVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerTeamVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerTeamVersionRequest proto.InternalMessageInfo

func (m *GetWorkerTeamVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type WorkerTeamVersion struct {
	WorkerteamVer int32 `protobuf:"varint,1,opt,name=workerteam_ver,json=workerteamVer,proto3" json:"workerteam_ver,omitempty"`
}

func (m *WorkerTeamVersion) Reset()         { *m = WorkerTeamVersion{} }
func (m *WorkerTeamVersion) String() string { return proto.CompactTextString(m) }
func (*WorkerTeamVersion) ProtoMessage()    {}
func (*WorkerTeamVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{18}
}
func (m *WorkerTeamVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerTeamVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerTeamVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerTeamVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerTeamVersion.Merge(m, src)
}
func (m *WorkerTeamVersion) XXX_Size() int {
	return m.Size()
}
func (m *WorkerTeamVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerTeamVersion.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerTeamVersion proto.InternalMessageInfo

func (m *WorkerTeamVersion) GetWorkerteamVer() int32 {
	if m != nil {
		return m.WorkerteamVer
	}
	return 0
}

type Job struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty" db:"-"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty" db:"team_uuid"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Archived    bool   `protobuf:"varint,5,opt,name=archived,proto3" json:"archived,omitempty" db:"archived"`
	Color       string `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty" db:"color"`
	Version     int32  `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{19}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Job) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Job) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Job) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Job) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type JobListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *JobListRequest) Reset()         { *m = JobListRequest{} }
func (m *JobListRequest) String() string { return proto.CompactTextString(m) }
func (*JobListRequest) ProtoMessage()    {}
func (*JobListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{20}
}
func (m *JobListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobListRequest.Merge(m, src)
}
func (m *JobListRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobListRequest proto.InternalMessageInfo

func (m *JobListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *JobListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type CreateJobRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Color       string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *CreateJobRequest) Reset()         { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()    {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{21}
}
func (m *CreateJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateJobRequest.Merge(m, src)
}
func (m *CreateJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateJobRequest proto.InternalMessageInfo

func (m *CreateJobRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateJobRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *CreateJobRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateJobRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type GetJobRequest struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{22}
}
func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(m, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetJobRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *GetJobRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type JobList struct {
	Jobs    []Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs"`
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *JobList) Reset()         { *m = JobList{} }
func (m *JobList) String() string { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()    {}
func (*JobList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{23}
}
func (m *JobList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobList.Merge(m, src)
}
func (m *JobList) XXX_Size() int {
	return m.Size()
}
func (m *JobList) XXX_DiscardUnknown() {
	xxx_messageInfo_JobList.DiscardUnknown(m)
}

var xxx_messageInfo_JobList proto.InternalMessageInfo

func (m *JobList) GetJobs() []Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *JobList) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type GetJobVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetJobVersionRequest) Reset()         { *m = GetJobVersionRequest{} }
func (m *GetJobVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobVersionRequest) ProtoMessage()    {}
func (*GetJobVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{24}
}
func (m *GetJobVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobVersionRequest.Merge(m, src)
}
func (m *GetJobVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobVersionRequest proto.InternalMessageInfo

func (m *GetJobVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type JobVersion struct {
	JobVer int32 `protobuf:"varint,1,opt,name=job_ver,json=jobVer,proto3" json:"job_ver,omitempty"`
}

func (m *JobVersion) Reset()         { *m = JobVersion{} }
func (m *JobVersion) String() string { return proto.CompactTextString(m) }
func (*JobVersion) ProtoMessage()    {}
func (*JobVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{25}
}
func (m *JobVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobVersion.Merge(m, src)
}
func (m *JobVersion) XXX_Size() int {
	return m.Size()
}
func (m *JobVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_JobVersion.DiscardUnknown(m)
}

var xxx_messageInfo_JobVersion proto.InternalMessageInfo

func (m *JobVersion) GetJobVer() int32 {
	if m != nil {
		return m.JobVer
	}
	return 0
}

type GetJobsVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetJobsVersionRequest) Reset()         { *m = GetJobsVersionRequest{} }
func (m *GetJobsVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobsVersionRequest) ProtoMessage()    {}
func (*GetJobsVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{26}
}
func (m *GetJobsVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetJobsVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetJobsVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetJobsVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobsVersionRequest.Merge(m, src)
}
func (m *GetJobsVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetJobsVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobsVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobsVersionRequest proto.InternalMessageInfo

func (m *GetJobsVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type JobsVersion struct {
	JobsVer int32 `protobuf:"varint,1,opt,name=jobs_ver,json=jobsVer,proto3" json:"jobs_ver,omitempty"`
}

func (m *JobsVersion) Reset()         { *m = JobsVersion{} }
func (m *JobsVersion) String() string { return proto.CompactTextString(m) }
func (*JobsVersion) ProtoMessage()    {}
func (*JobsVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{27}
}
func (m *JobsVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobsVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobsVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobsVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobsVersion.Merge(m, src)
}
func (m *JobsVersion) XXX_Size() int {
	return m.Size()
}
func (m *JobsVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_JobsVersion.DiscardUnknown(m)
}

var xxx_messageInfo_JobsVersion proto.InternalMessageInfo

func (m *JobsVersion) GetJobsVer() int32 {
	if m != nil {
		return m.JobsVer
	}
	return 0
}

type Shift struct {
	Uuid        string    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" db:"uuid"`
	CompanyUuid string    `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty" db:"-"`
	TeamUuid    string    `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty" db:"team_uuid"`
	Start       time.Time `protobuf:"bytes,4,opt,name=start,proto3,stdtime" json:"start" db:"start"`
	Stop        time.Time `protobuf:"bytes,5,opt,name=stop,proto3,stdtime" json:"stop" db:"stop"`
	UserUuid    string    `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty" db:"user_uuid"`
	JobUuid     string    `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty" db:"job_uuid"`
	Published   bool      `protobuf:"varint,8,opt,name=published,proto3" json:"published,omitempty" db:"published"`
}

func (m *Shift) Reset()         { *m = Shift{} }
func (m *Shift) String() string { return proto.CompactTextString(m) }
func (*Shift) ProtoMessage()    {}
func (*Shift) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{28}
}
func (m *Shift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Shift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shift.Merge(m, src)
}
func (m *Shift) XXX_Size() int {
	return m.Size()
}
func (m *Shift) XXX_DiscardUnknown() {
	xxx_messageInfo_Shift.DiscardUnknown(m)
}

var xxx_messageInfo_Shift proto.InternalMessageInfo

func (m *Shift) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Shift) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Shift) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Shift) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *Shift) GetStop() time.Time {
	if m != nil {
		return m.Stop
	}
	return time.Time{}
}

func (m *Shift) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *Shift) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *Shift) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type ShiftList struct {
	Shifts           []Shift   `protobuf:"bytes,1,rep,name=shifts,proto3" json:"shifts"`
	ShiftStartAfter  time.Time `protobuf:"bytes,2,opt,name=shift_start_after,json=shiftStartAfter,proto3,stdtime" json:"shift_start_after"`
	ShiftStartBefore time.Time `protobuf:"bytes,3,opt,name=shift_start_before,json=shiftStartBefore,proto3,stdtime" json:"shift_start_before"`
}

func (m *ShiftList) Reset()         { *m = ShiftList{} }
func (m *ShiftList) String() string { return proto.CompactTextString(m) }
func (*ShiftList) ProtoMessage()    {}
func (*ShiftList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{29}
}
func (m *ShiftList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShiftList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShiftList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShiftList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShiftList.Merge(m, src)
}
func (m *ShiftList) XXX_Size() int {
	return m.Size()
}
func (m *ShiftList) XXX_DiscardUnknown() {
	xxx_messageInfo_ShiftList.DiscardUnknown(m)
}

var xxx_messageInfo_ShiftList proto.InternalMessageInfo

func (m *ShiftList) GetShifts() []Shift {
	if m != nil {
		return m.Shifts
	}
	return nil
}

func (m *ShiftList) GetShiftStartAfter() time.Time {
	if m != nil {
		return m.ShiftStartAfter
	}
	return time.Time{}
}

func (m *ShiftList) GetShiftStartBefore() time.Time {
	if m != nil {
		return m.ShiftStartBefore
	}
	return time.Time{}
}

type ShiftListRequest struct {
	CompanyUuid      string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid          string `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	ShiftStartAfter  string `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter,proto3" json:"shift_start_after,omitempty"`
	ShiftStartBefore string `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore,proto3" json:"shift_start_before,omitempty"`
}

func (m *ShiftListRequest) Reset()         { *m = ShiftListRequest{} }
func (m *ShiftListRequest) String() string { return proto.CompactTextString(m) }
func (*ShiftListRequest) ProtoMessage()    {}
func (*ShiftListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{30}
}
func (m *ShiftListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShiftListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShiftListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShiftListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShiftListRequest.Merge(m, src)
}
func (m *ShiftListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShiftListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShiftListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShiftListRequest proto.InternalMessageInfo

func (m *ShiftListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *ShiftListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *ShiftListRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *ShiftListRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *ShiftListRequest) GetShiftStartAfter() string {
	if m != nil {
		return m.ShiftStartAfter
	}
	return ""
}

func (m *ShiftListRequest) GetShiftStartBefore() string {
	if m != nil {
		return m.ShiftStartBefore
	}
	return ""
}

type WorkerShiftListRequest struct {
	CompanyUuid      string    `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string    `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	WorkerUuid       string    `protobuf:"bytes,3,opt,name=worker_uuid,json=workerUuid,proto3" json:"worker_uuid,omitempty"`
	ShiftStartAfter  time.Time `protobuf:"bytes,4,opt,name=shift_start_after,json=shiftStartAfter,proto3,stdtime" json:"shift_start_after"`
	ShiftStartBefore time.Time `protobuf:"bytes,5,opt,name=shift_start_before,json=shiftStartBefore,proto3,stdtime" json:"shift_start_before"`
}

func (m *WorkerShiftListRequest) Reset()         { *m = WorkerShiftListRequest{} }
func (m *WorkerShiftListRequest) String() string { return proto.CompactTextString(m) }
func (*WorkerShiftListRequest) ProtoMessage()    {}
func (*WorkerShiftListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{31}
}
func (m *WorkerShiftListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerShiftListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerShiftListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerShiftListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerShiftListRequest.Merge(m, src)
}
func (m *WorkerShiftListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkerShiftListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerShiftListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerShiftListRequest proto.InternalMessageInfo

func (m *WorkerShiftListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetWorkerUuid() string {
	if m != nil {
		return m.WorkerUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetShiftStartAfter() time.Time {
	if m != nil {
		return m.ShiftStartAfter
	}
	return time.Time{}
}

func (m *WorkerShiftListRequest) GetShiftStartBefore() time.Time {
	if m != nil {
		return m.ShiftStartBefore
	}
	return time.Time{}
}

type BulkPublishShiftsRequest struct {
	CompanyUuid      string    `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string    `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid         string    `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid          string    `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	ShiftStartAfter  time.Time `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter,proto3,stdtime" json:"shift_start_after"`
	ShiftStartBefore time.Time `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore,proto3,stdtime" json:"shift_start_before"`
	Published        bool      `protobuf:"varint,7,opt,name=published,proto3" json:"published,omitempty"`
}

func (m *BulkPublishShiftsRequest) Reset()         { *m = BulkPublishShiftsRequest{} }
func (m *BulkPublishShiftsRequest) String() string { return proto.CompactTextString(m) }
func (*BulkPublishShiftsRequest) ProtoMessage()    {}
func (*BulkPublishShiftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{32}
}
func (m *BulkPublishShiftsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkPublishShiftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkPublishShiftsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkPublishShiftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkPublishShiftsRequest.Merge(m, src)
}
func (m *BulkPublishShiftsRequest) XXX_Size() int {
	return m.Size()
}
func (m *BulkPublishShiftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkPublishShiftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BulkPublishShiftsRequest proto.InternalMessageInfo

func (m *BulkPublishShiftsRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetShiftStartAfter() time.Time {
	if m != nil {
		return m.ShiftStartAfter
	}
	return time.Time{}
}

func (m *BulkPublishShiftsRequest) GetShiftStartBefore() time.Time {
	if m != nil {
		return m.ShiftStartBefore
	}
	return time.Time{}
}

func (m *BulkPublishShiftsRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type CreateShiftRequest struct {
	CompanyUuid string    `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string    `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Start       time.Time `protobuf:"bytes,4,opt,name=start,proto3,stdtime" json:"start"`
	Stop        time.Time `protobuf:"bytes,5,opt,name=stop,proto3,stdtime" json:"stop"`
	UserUuid    string    `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid     string    `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	Published   bool      `protobuf:"varint,8,opt,name=published,proto3" json:"published,omitempty"`
}

func (m *CreateShiftRequest) Reset()         { *m = CreateShiftRequest{} }
func (m *CreateShiftRequest) String() string { return proto.CompactTextString(m) }
func (*CreateShiftRequest) ProtoMessage()    {}
func (*CreateShiftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{33}
}
func (m *CreateShiftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateShiftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateShiftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateShiftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateShiftRequest.Merge(m, src)
}
func (m *CreateShiftRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateShiftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateShiftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateShiftRequest proto.InternalMessageInfo

func (m *CreateShiftRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *CreateShiftRequest) GetStop() time.Time {
	if m != nil {
		return m.Stop
	}
	return time.Time{}
}

func (m *CreateShiftRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type GetShiftRequest struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *GetShiftRequest) Reset()         { *m = GetShiftRequest{} }
func (m *GetShiftRequest) String() string { return proto.CompactTextString(m) }
func (*GetShiftRequest) ProtoMessage()    {}
func (*GetShiftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{34}
}
func (m *GetShiftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShiftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShiftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShiftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShiftRequest.Merge(m, src)
}
func (m *GetShiftRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShiftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShiftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShiftRequest proto.InternalMessageInfo

func (m *GetShiftRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetShiftRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *GetShiftRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

// directory
type DirectoryEntry struct {
	UserUuid    string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	InternalId  string `protobuf:"bytes,2,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	// coming from account
	Name               string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Email              string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	ConfirmedAndActive bool   `protobuf:"varint,7,opt,name=confirmed_and_active,json=confirmedAndActive,proto3" json:"confirmed_and_active,omitempty"`
	Phonenumber        string `protobuf:"bytes,8,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	PhotoUrl           string `protobuf:"bytes,9,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
}

func (m *DirectoryEntry) Reset()         { *m = DirectoryEntry{} }
func (m *DirectoryEntry) String() string { return proto.CompactTextString(m) }
func (*DirectoryEntry) ProtoMessage()    {}
func (*DirectoryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{35}
}
func (m *DirectoryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryEntry.Merge(m, src)
}
func (m *DirectoryEntry) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryEntry proto.InternalMessageInfo

func (m *DirectoryEntry) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *DirectoryEntry) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *DirectoryEntry) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DirectoryEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DirectoryEntry) GetConfirmedAndActive() bool {
	if m != nil {
		return m.ConfirmedAndActive
	}
	return false
}

func (m *DirectoryEntry) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *DirectoryEntry) GetPhotoUrl() string {
	if m != nil {
		return m.PhotoUrl
	}
	return ""
}

type NewDirectoryEntry struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phonenumber string `protobuf:"bytes,4,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	InternalId  string `protobuf:"bytes,5,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
}

func (m *NewDirectoryEntry) Reset()         { *m = NewDirectoryEntry{} }
func (m *NewDirectoryEntry) String() string { return proto.CompactTextString(m) }
func (*NewDirectoryEntry) ProtoMessage()    {}
func (*NewDirectoryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{36}
}
func (m *NewDirectoryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewDirectoryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewDirectoryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewDirectoryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDirectoryEntry.Merge(m, src)
}
func (m *NewDirectoryEntry) XXX_Size() int {
	return m.Size()
}
func (m *NewDirectoryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDirectoryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_NewDirectoryEntry proto.InternalMessageInfo

func (m *NewDirectoryEntry) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *NewDirectoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewDirectoryEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewDirectoryEntry) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *NewDirectoryEntry) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

type DirectoryEntryRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *DirectoryEntryRequest) Reset()         { *m = DirectoryEntryRequest{} }
func (m *DirectoryEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DirectoryEntryRequest) ProtoMessage()    {}
func (*DirectoryEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{37}
}
func (m *DirectoryEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryEntryRequest.Merge(m, src)
}
func (m *DirectoryEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryEntryRequest proto.InternalMessageInfo

func (m *DirectoryEntryRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryEntryRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type DirectoryList struct {
	Accounts []DirectoryEntry `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
	Limit    int32            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32            `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *DirectoryList) Reset()         { *m = DirectoryList{} }
func (m *DirectoryList) String() string { return proto.CompactTextString(m) }
func (*DirectoryList) ProtoMessage()    {}
func (*DirectoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{38}
}
func (m *DirectoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryList.Merge(m, src)
}
func (m *DirectoryList) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryList.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryList proto.InternalMessageInfo

func (m *DirectoryList) GetAccounts() []DirectoryEntry {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *DirectoryList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DirectoryList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DirectoryListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Limit       int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *DirectoryListRequest) Reset()         { *m = DirectoryListRequest{} }
func (m *DirectoryListRequest) String() string { return proto.CompactTextString(m) }
func (*DirectoryListRequest) ProtoMessage()    {}
func (*DirectoryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{39}
}
func (m *DirectoryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryListRequest.Merge(m, src)
}
func (m *DirectoryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryListRequest proto.InternalMessageInfo

func (m *DirectoryListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DirectoryListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DirectoryID struct {
	InternalId string `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	UserUuid   string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *DirectoryID) Reset()         { *m = DirectoryID{} }
func (m *DirectoryID) String() string { return proto.CompactTextString(m) }
func (*DirectoryID) ProtoMessage()    {}
func (*DirectoryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{40}
}
func (m *DirectoryID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryID.Merge(m, src)
}
func (m *DirectoryID) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryID) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryID.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryID proto.InternalMessageInfo

func (m *DirectoryID) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *DirectoryID) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type RowsOfDirectory struct {
	DirectoryIds []DirectoryID `protobuf:"bytes,1,rep,name=directory_ids,json=directoryIds,proto3" json:"directory_ids"`
}

func (m *RowsOfDirectory) Reset()         { *m = RowsOfDirectory{} }
func (m *RowsOfDirectory) String() string { return proto.CompactTextString(m) }
func (*RowsOfDirectory) ProtoMessage()    {}
func (*RowsOfDirectory) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{41}
}
func (m *RowsOfDirectory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowsOfDirectory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowsOfDirectory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowsOfDirectory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowsOfDirectory.Merge(m, src)
}
func (m *RowsOfDirectory) XXX_Size() int {
	return m.Size()
}
func (m *RowsOfDirectory) XXX_DiscardUnknown() {
	xxx_messageInfo_RowsOfDirectory.DiscardUnknown(m)
}

var xxx_messageInfo_RowsOfDirectory proto.InternalMessageInfo

func (m *RowsOfDirectory) GetDirectoryIds() []DirectoryID {
	if m != nil {
		return m.DirectoryIds
	}
	return nil
}

type DirectoryEntryID struct {
	InternalId string `protobuf:"bytes,1,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
}

func (m *DirectoryEntryID) Reset()         { *m = DirectoryEntryID{} }
func (m *DirectoryEntryID) String() string { return proto.CompactTextString(m) }
func (*DirectoryEntryID) ProtoMessage()    {}
func (*DirectoryEntryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{42}
}
func (m *DirectoryEntryID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryEntryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryEntryID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryEntryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryEntryID.Merge(m, src)
}
func (m *DirectoryEntryID) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryEntryID) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryEntryID.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryEntryID proto.InternalMessageInfo

func (m *DirectoryEntryID) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

// admins
type AdminListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *AdminListRequest) Reset()         { *m = AdminListRequest{} }
func (m *AdminListRequest) String() string { return proto.CompactTextString(m) }
func (*AdminListRequest) ProtoMessage()    {}
func (*AdminListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{43}
}
func (m *AdminListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminListRequest.Merge(m, src)
}
func (m *AdminListRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminListRequest proto.InternalMessageInfo

func (m *AdminListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type Admins struct {
	CompanyUuid string           `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Admins      []DirectoryEntry `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins"`
	Version     int32            `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Admins) Reset()         { *m = Admins{} }
func (m *Admins) String() string { return proto.CompactTextString(m) }
func (*Admins) ProtoMessage()    {}
func (*Admins) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{44}
}
func (m *Admins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Admins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Admins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Admins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Admins.Merge(m, src)
}
func (m *Admins) XXX_Size() int {
	return m.Size()
}
func (m *Admins) XXX_DiscardUnknown() {
	xxx_messageInfo_Admins.DiscardUnknown(m)
}

var xxx_messageInfo_Admins proto.InternalMessageInfo

func (m *Admins) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Admins) GetAdmins() []DirectoryEntry {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Admins) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type AdminOfRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *AdminOfRequest) Reset()         { *m = AdminOfRequest{} }
func (m *AdminOfRequest) String() string { return proto.CompactTextString(m) }
func (*AdminOfRequest) ProtoMessage()    {}
func (*AdminOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{45}
}
func (m *AdminOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminOfRequest.Merge(m, src)
}
func (m *AdminOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminOfRequest proto.InternalMessageInfo

func (m *AdminOfRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type AdminOfList struct {
	UserUuid  string    `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Companies []Company `protobuf:"bytes,2,rep,name=companies,proto3" json:"companies"`
}

func (m *AdminOfList) Reset()         { *m = AdminOfList{} }
func (m *AdminOfList) String() string { return proto.CompactTextString(m) }
func (*AdminOfList) ProtoMessage()    {}
func (*AdminOfList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{46}
}
func (m *AdminOfList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminOfList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminOfList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminOfList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminOfList.Merge(m, src)
}
func (m *AdminOfList) XXX_Size() int {
	return m.Size()
}
func (m *AdminOfList) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminOfList.DiscardUnknown(m)
}

var xxx_messageInfo_AdminOfList proto.InternalMessageInfo

func (m *AdminOfList) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *AdminOfList) GetCompanies() []Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

type AdminExist struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *AdminExist) Reset()         { *m = AdminExist{} }
func (m *AdminExist) String() string { return proto.CompactTextString(m) }
func (*AdminExist) ProtoMessage()    {}
func (*AdminExist) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{47}
}
func (m *AdminExist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminExist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminExist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminExist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminExist.Merge(m, src)
}
func (m *AdminExist) XXX_Size() int {
	return m.Size()
}
func (m *AdminExist) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminExist.DiscardUnknown(m)
}

var xxx_messageInfo_AdminExist proto.InternalMessageInfo

func (m *AdminExist) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type GetAdminsVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetAdminsVersionRequest) Reset()         { *m = GetAdminsVersionRequest{} }
func (m *GetAdminsVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetAdminsVersionRequest) ProtoMessage()    {}
func (*GetAdminsVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{48}
}
func (m *GetAdminsVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdminsVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdminsVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAdminsVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdminsVersionRequest.Merge(m, src)
}
func (m *GetAdminsVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAdminsVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdminsVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdminsVersionRequest proto.InternalMessageInfo

func (m *GetAdminsVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type AdminsVersion struct {
	AdminsVer int32 `protobuf:"varint,1,opt,name=admins_ver,json=adminsVer,proto3" json:"admins_ver,omitempty"`
}

func (m *AdminsVersion) Reset()         { *m = AdminsVersion{} }
func (m *AdminsVersion) String() string { return proto.CompactTextString(m) }
func (*AdminsVersion) ProtoMessage()    {}
func (*AdminsVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{49}
}
func (m *AdminsVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminsVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminsVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminsVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminsVersion.Merge(m, src)
}
func (m *AdminsVersion) XXX_Size() int {
	return m.Size()
}
func (m *AdminsVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminsVersion.DiscardUnknown(m)
}

var xxx_messageInfo_AdminsVersion proto.InternalMessageInfo

func (m *AdminsVersion) GetAdminsVer() int32 {
	if m != nil {
		return m.AdminsVer
	}
	return 0
}

// workers
type WorkerListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *WorkerListRequest) Reset()         { *m = WorkerListRequest{} }
func (m *WorkerListRequest) String() string { return proto.CompactTextString(m) }
func (*WorkerListRequest) ProtoMessage()    {}
func (*WorkerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{50}
}
func (m *WorkerListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerListRequest.Merge(m, src)
}
func (m *WorkerListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerListRequest proto.InternalMessageInfo

func (m *WorkerListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *WorkerListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type Workers struct {
	CompanyUuid string           `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string           `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Workers     []DirectoryEntry `protobuf:"bytes,3,rep,name=workers,proto3" json:"workers"`
	Version     int32            `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Workers) Reset()         { *m = Workers{} }
func (m *Workers) String() string { return proto.CompactTextString(m) }
func (*Workers) ProtoMessage()    {}
func (*Workers) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{51}
}
func (m *Workers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workers.Merge(m, src)
}
func (m *Workers) XXX_Size() int {
	return m.Size()
}
func (m *Workers) XXX_DiscardUnknown() {
	xxx_messageInfo_Workers.DiscardUnknown(m)
}

var xxx_messageInfo_Workers proto.InternalMessageInfo

func (m *Workers) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Workers) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Workers) GetWorkers() []DirectoryEntry {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *Workers) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Worker struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Version     int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{52}
}
func (m *Worker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return m.Size()
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Worker) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Worker) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *Worker) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type WorkerOfRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *WorkerOfRequest) Reset()         { *m = WorkerOfRequest{} }
func (m *WorkerOfRequest) String() string { return proto.CompactTextString(m) }
func (*WorkerOfRequest) ProtoMessage()    {}
func (*WorkerOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{53}
}
func (m *WorkerOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerOfRequest.Merge(m, src)
}
func (m *WorkerOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *WorkerOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerOfRequest proto.InternalMessageInfo

func (m *WorkerOfRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type WorkerOfList struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Teams    []Team `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams"`
}

func (m *WorkerOfList) Reset()         { *m = WorkerOfList{} }
func (m *WorkerOfList) String() string { return proto.CompactTextString(m) }
func (*WorkerOfList) ProtoMessage()    {}
func (*WorkerOfList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{54}
}
func (m *WorkerOfList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerOfList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerOfList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerOfList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerOfList.Merge(m, src)
}
func (m *WorkerOfList) XXX_Size() int {
	return m.Size()
}
func (m *WorkerOfList) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerOfList.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerOfList proto.InternalMessageInfo

func (m *WorkerOfList) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *WorkerOfList) GetTeams() []Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type WorkerExist struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *WorkerExist) Reset()         { *m = WorkerExist{} }
func (m *WorkerExist) String() string { return proto.CompactTextString(m) }
func (*WorkerExist) ProtoMessage()    {}
func (*WorkerExist) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{55}
}
func (m *WorkerExist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerExist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerExist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerExist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerExist.Merge(m, src)
}
func (m *WorkerExist) XXX_Size() int {
	return m.Size()
}
func (m *WorkerExist) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerExist.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerExist proto.InternalMessageInfo

func (m *WorkerExist) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type GetWorkersVersionRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetWorkersVersionRequest) Reset()         { *m = GetWorkersVersionRequest{} }
func (m *GetWorkersVersionRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkersVersionRequest) ProtoMessage()    {}
func (*GetWorkersVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{56}
}
func (m *GetWorkersVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkersVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkersVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkersVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkersVersionRequest.Merge(m, src)
}
func (m *GetWorkersVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkersVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkersVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkersVersionRequest proto.InternalMessageInfo

func (m *GetWorkersVersionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type WorkersVersion struct {
	WorkersVer int32 `protobuf:"varint,1,opt,name=workers_ver,json=workersVer,proto3" json:"workers_ver,omitempty"`
}

func (m *WorkersVersion) Reset()         { *m = WorkersVersion{} }
func (m *WorkersVersion) String() string { return proto.CompactTextString(m) }
func (*WorkersVersion) ProtoMessage()    {}
func (*WorkersVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{57}
}
func (m *WorkersVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkersVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkersVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkersVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkersVersion.Merge(m, src)
}
func (m *WorkersVersion) XXX_Size() int {
	return m.Size()
}
func (m *WorkersVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkersVersion.DiscardUnknown(m)
}

var xxx_messageInfo_WorkersVersion proto.InternalMessageInfo

func (m *WorkersVersion) GetWorkersVer() int32 {
	if m != nil {
		return m.WorkersVer
	}
	return 0
}

type Association struct {
	Account DirectoryEntry `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	Teams   []Team         `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams"`
	Admin   bool           `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Association) Reset()         { *m = Association{} }
func (m *Association) String() string { return proto.CompactTextString(m) }
func (*Association) ProtoMessage()    {}
func (*Association) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{58}
}
func (m *Association) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Association) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Association.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Association) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Association.Merge(m, src)
}
func (m *Association) XXX_Size() int {
	return m.Size()
}
func (m *Association) XXX_DiscardUnknown() {
	xxx_messageInfo_Association.DiscardUnknown(m)
}

var xxx_messageInfo_Association proto.InternalMessageInfo

func (m *Association) GetAccount() DirectoryEntry {
	if m != nil {
		return m.Account
	}
	return DirectoryEntry{}
}

func (m *Association) GetTeams() []Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Association) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type AssociationList struct {
	Accounts []Association `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
	Limit    int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32         `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *AssociationList) Reset()         { *m = AssociationList{} }
func (m *AssociationList) String() string { return proto.CompactTextString(m) }
func (*AssociationList) ProtoMessage()    {}
func (*AssociationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{59}
}
func (m *AssociationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssociationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssociationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssociationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssociationList.Merge(m, src)
}
func (m *AssociationList) XXX_Size() int {
	return m.Size()
}
func (m *AssociationList) XXX_DiscardUnknown() {
	xxx_messageInfo_AssociationList.DiscardUnknown(m)
}

var xxx_messageInfo_AssociationList proto.InternalMessageInfo

func (m *AssociationList) GetAccounts() []Association {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AssociationList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AssociationList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type TimeZoneList struct {
	Timezones []string `protobuf:"bytes,1,rep,name=timezones,proto3" json:"timezones,omitempty"`
}

func (m *TimeZoneList) Reset()         { *m = TimeZoneList{} }
func (m *TimeZoneList) String() string { return proto.CompactTextString(m) }
func (*TimeZoneList) ProtoMessage()    {}
func (*TimeZoneList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{60}
}
func (m *TimeZoneList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeZoneList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeZoneList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeZoneList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeZoneList.Merge(m, src)
}
func (m *TimeZoneList) XXX_Size() int {
	return m.Size()
}
func (m *TimeZoneList) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeZoneList.DiscardUnknown(m)
}

var xxx_messageInfo_TimeZoneList proto.InternalMessageInfo

func (m *TimeZoneList) GetTimezones() []string {
	if m != nil {
		return m.Timezones
	}
	return nil
}

type TimeZoneListRequest struct {
}

func (m *TimeZoneListRequest) Reset()         { *m = TimeZoneListRequest{} }
func (m *TimeZoneListRequest) String() string { return proto.CompactTextString(m) }
func (*TimeZoneListRequest) ProtoMessage()    {}
func (*TimeZoneListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{61}
}
func (m *TimeZoneListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeZoneListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeZoneListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeZoneListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeZoneListRequest.Merge(m, src)
}
func (m *TimeZoneListRequest) XXX_Size() int {
	return m.Size()
}
func (m *TimeZoneListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeZoneListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeZoneListRequest proto.InternalMessageInfo

type ScheduledPerWeek struct {
	Week  string `protobuf:"bytes,1,opt,name=week,proto3" json:"week,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ScheduledPerWeek) Reset()         { *m = ScheduledPerWeek{} }
func (m *ScheduledPerWeek) String() string { return proto.CompactTextString(m) }
func (*ScheduledPerWeek) ProtoMessage()    {}
func (*ScheduledPerWeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{62}
}
func (m *ScheduledPerWeek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledPerWeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduledPerWeek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduledPerWeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledPerWeek.Merge(m, src)
}
func (m *ScheduledPerWeek) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledPerWeek) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledPerWeek.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledPerWeek proto.InternalMessageInfo

func (m *ScheduledPerWeek) GetWeek() string {
	if m != nil {
		return m.Week
	}
	return ""
}

func (m *ScheduledPerWeek) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GrowthGraphResponse struct {
	PeopleScheduledPerWeek map[string]int32 `protobuf:"bytes,1,rep,name=people_scheduled_per_week,json=peopleScheduledPerWeek,proto3" json:"people_scheduled_per_week,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PeopleOnShifts         int32            `protobuf:"varint,2,opt,name=people_on_shifts,json=peopleOnShifts,proto3" json:"people_on_shifts,omitempty"`
}

func (m *GrowthGraphResponse) Reset()         { *m = GrowthGraphResponse{} }
func (m *GrowthGraphResponse) String() string { return proto.CompactTextString(m) }
func (*GrowthGraphResponse) ProtoMessage()    {}
func (*GrowthGraphResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{63}
}
func (m *GrowthGraphResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrowthGraphResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrowthGraphResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrowthGraphResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrowthGraphResponse.Merge(m, src)
}
func (m *GrowthGraphResponse) XXX_Size() int {
	return m.Size()
}
func (m *GrowthGraphResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GrowthGraphResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GrowthGraphResponse proto.InternalMessageInfo

func (m *GrowthGraphResponse) GetPeopleScheduledPerWeek() map[string]int32 {
	if m != nil {
		return m.PeopleScheduledPerWeek
	}
	return nil
}

func (m *GrowthGraphResponse) GetPeopleOnShifts() int32 {
	if m != nil {
		return m.PeopleOnShifts
	}
	return 0
}

type GrowthGraphRequest struct {
}

func (m *GrowthGraphRequest) Reset()         { *m = GrowthGraphRequest{} }
func (m *GrowthGraphRequest) String() string { return proto.CompactTextString(m) }
func (*GrowthGraphRequest) ProtoMessage()    {}
func (*GrowthGraphRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{64}
}
func (m *GrowthGraphRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrowthGraphRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrowthGraphRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrowthGraphRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrowthGraphRequest.Merge(m, src)
}
func (m *GrowthGraphRequest) XXX_Size() int {
	return m.Size()
}
func (m *GrowthGraphRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GrowthGraphRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GrowthGraphRequest proto.InternalMessageInfo

type InvalidateCacheRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (m *InvalidateCacheRequest) Reset()         { *m = InvalidateCacheRequest{} }
func (m *InvalidateCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateCacheRequest) ProtoMessage()    {}
func (*InvalidateCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade57ca5b8f3903f, []int{65}
}
func (m *InvalidateCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateCacheRequest.Merge(m, src)
}
func (m *InvalidateCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateCacheRequest proto.InternalMessageInfo

func (m *InvalidateCacheRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func init() {
	proto.RegisterType((*Company)(nil), "staffjoy.company.Company")
	proto.RegisterType((*CompanyList)(nil), "staffjoy.company.CompanyList")
	proto.RegisterType((*CompanyListRequest)(nil), "staffjoy.company.CompanyListRequest")
	proto.RegisterType((*CreateCompanyRequest)(nil), "staffjoy.company.CreateCompanyRequest")
	proto.RegisterType((*GetCompanyRequest)(nil), "staffjoy.company.GetCompanyRequest")
	proto.RegisterType((*RowsOfCompany)(nil), "staffjoy.company.RowsOfCompany")
	proto.RegisterType((*GetCompanyVersionRequest)(nil), "staffjoy.company.GetCompanyVersionRequest")
	proto.RegisterType((*CompanyVersion)(nil), "staffjoy.company.CompanyVersion")
	proto.RegisterType((*Team)(nil), "staffjoy.company.Team")
	proto.RegisterType((*CreateTeamRequest)(nil), "staffjoy.company.CreateTeamRequest")
	proto.RegisterType((*GetTeamRequest)(nil), "staffjoy.company.GetTeamRequest")
	proto.RegisterType((*TeamList)(nil), "staffjoy.company.TeamList")
	proto.RegisterType((*TeamListRequest)(nil), "staffjoy.company.TeamListRequest")
	proto.RegisterType((*GetTeamVersionRequest)(nil), "staffjoy.company.GetTeamVersionRequest")
	proto.RegisterType((*TeamVersion)(nil), "staffjoy.company.TeamVersion")
	proto.RegisterType((*GetTeamsVersionRequest)(nil), "staffjoy.company.GetTeamsVersionRequest")
	proto.RegisterType((*TeamsVersion)(nil), "staffjoy.company.TeamsVersion")
	proto.RegisterType((*GetWorkerTeamVersionRequest)(nil), "staffjoy.company.GetWorkerTeamVersionRequest")
	proto.RegisterType((*WorkerTeamVersion)(nil), "staffjoy.company.WorkerTeamVersion")
	proto.RegisterType((*Job)(nil), "staffjoy.company.Job")
	proto.RegisterType((*JobListRequest)(nil), "staffjoy.company.JobListRequest")
	proto.RegisterType((*CreateJobRequest)(nil), "staffjoy.company.CreateJobRequest")
	proto.RegisterType((*GetJobRequest)(nil), "staffjoy.company.GetJobRequest")
	proto.RegisterType((*JobList)(nil), "staffjoy.company.JobList")
	proto.RegisterType((*GetJobVersionRequest)(nil), "staffjoy.company.GetJobVersionRequest")
	proto.RegisterType((*JobVersion)(nil), "staffjoy.company.JobVersion")
	proto.RegisterType((*GetJobsVersionRequest)(nil), "staffjoy.company.GetJobsVersionRequest")
	proto.RegisterType((*JobsVersion)(nil), "staffjoy.company.JobsVersion")
	proto.RegisterType((*Shift)(nil), "staffjoy.company.Shift")
	proto.RegisterType((*ShiftList)(nil), "staffjoy.company.ShiftList")
	proto.RegisterType((*ShiftListRequest)(nil), "staffjoy.company.ShiftListRequest")
	proto.RegisterType((*WorkerShiftListRequest)(nil), "staffjoy.company.WorkerShiftListRequest")
	proto.RegisterType((*BulkPublishShiftsRequest)(nil), "staffjoy.company.BulkPublishShiftsRequest")
	proto.RegisterType((*CreateShiftRequest)(nil), "staffjoy.company.CreateShiftRequest")
	proto.RegisterType((*GetShiftRequest)(nil), "staffjoy.company.GetShiftRequest")
	proto.RegisterType((*DirectoryEntry)(nil), "staffjoy.company.DirectoryEntry")
	proto.RegisterType((*NewDirectoryEntry)(nil), "staffjoy.company.NewDirectoryEntry")
	proto.RegisterType((*DirectoryEntryRequest)(nil), "staffjoy.company.DirectoryEntryRequest")
	proto.RegisterType((*DirectoryList)(nil), "staffjoy.company.DirectoryList")
	proto.RegisterType((*DirectoryListRequest)(nil), "staffjoy.company.DirectoryListRequest")
	proto.RegisterType((*DirectoryID)(nil), "staffjoy.company.DirectoryID")
	proto.RegisterType((*RowsOfDirectory)(nil), "staffjoy.company.RowsOfDirectory")
	proto.RegisterType((*DirectoryEntryID)(nil), "staffjoy.company.DirectoryEntryID")
	proto.RegisterType((*AdminListRequest)(nil), "staffjoy.company.AdminListRequest")
	proto.RegisterType((*Admins)(nil), "staffjoy.company.Admins")
	proto.RegisterType((*AdminOfRequest)(nil), "staffjoy.company.AdminOfRequest")
	proto.RegisterType((*AdminOfList)(nil), "staffjoy.company.AdminOfList")
	proto.RegisterType((*AdminExist)(nil), "staffjoy.company.AdminExist")
	proto.RegisterType((*GetAdminsVersionRequest)(nil), "staffjoy.company.GetAdminsVersionRequest")
	proto.RegisterType((*AdminsVersion)(nil), "staffjoy.company.AdminsVersion")
	proto.RegisterType((*WorkerListRequest)(nil), "staffjoy.company.WorkerListRequest")
	proto.RegisterType((*Workers)(nil), "staffjoy.company.Workers")
	proto.RegisterType((*Worker)(nil), "staffjoy.company.Worker")
	proto.RegisterType((*WorkerOfRequest)(nil), "staffjoy.company.WorkerOfRequest")
	proto.RegisterType((*WorkerOfList)(nil), "staffjoy.company.WorkerOfList")
	proto.RegisterType((*WorkerExist)(nil), "staffjoy.company.WorkerExist")
	proto.RegisterType((*GetWorkersVersionRequest)(nil), "staffjoy.company.GetWorkersVersionRequest")
	proto.RegisterType((*WorkersVersion)(nil), "staffjoy.company.WorkersVersion")
	proto.RegisterType((*Association)(nil), "staffjoy.company.Association")
	proto.RegisterType((*AssociationList)(nil), "staffjoy.company.AssociationList")
	proto.RegisterType((*TimeZoneList)(nil), "staffjoy.company.TimeZoneList")
	proto.RegisterType((*TimeZoneListRequest)(nil), "staffjoy.company.TimeZoneListRequest")
	proto.RegisterType((*ScheduledPerWeek)(nil), "staffjoy.company.ScheduledPerWeek")
	proto.RegisterType((*GrowthGraphResponse)(nil), "staffjoy.company.GrowthGraphResponse")
	proto.RegisterMapType((map[string]int32)(nil), "staffjoy.company.GrowthGraphResponse.PeopleScheduledPerWeekEntry")
	proto.RegisterType((*GrowthGraphRequest)(nil), "staffjoy.company.GrowthGraphRequest")
	proto.RegisterType((*InvalidateCacheRequest)(nil), "staffjoy.company.InvalidateCacheRequest")
}

func init() { proto.RegisterFile("company.proto", fileDescriptor_ade57ca5b8f3903f) }

var fileDescriptor_ade57ca5b8f3903f = []byte{
	// 3164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdd, 0x6f, 0x1b, 0xc7,
	0xb5, 0xe7, 0x92, 0x12, 0x45, 0x1e, 0x9a, 0xfa, 0x18, 0x4b, 0x32, 0x4d, 0xc9, 0xa2, 0x32, 0x89,
	0x6d, 0x45, 0xb6, 0xc8, 0x48, 0x8e, 0x6f, 0x0c, 0xdd, 0x7c, 0x58, 0xb2, 0x0c, 0x45, 0x4a, 0x6e,
	0x6c, 0xd0, 0x76, 0x14, 0xe4, 0xa2, 0x65, 0x97, 0xe4, 0xd0, 0xa2, 0x45, 0x72, 0x59, 0xee, 0x52,
	0x8a, 0x92, 0x18, 0x4d, 0x0b, 0x34, 0x0d, 0x50, 0xb7, 0x08, 0xd0, 0xa7, 0xf4, 0xa1, 0x2d, 0xd0,
	0xf6, 0xad, 0xe8, 0x6b, 0xff, 0x85, 0x3c, 0x06, 0x28, 0x50, 0xf4, 0x49, 0x2d, 0x92, 0xa0, 0xe8,
	0xb3, 0xfe, 0x82, 0x62, 0x67, 0x66, 0x77, 0x67, 0x77, 0x67, 0xc9, 0xa5, 0xa4, 0xa2, 0x7d, 0x23,
	0x67, 0xce, 0x9c, 0x39, 0xe7, 0x77, 0xbe, 0x66, 0xce, 0x2c, 0xa4, 0x2b, 0x5a, 0xb3, 0xad, 0xb6,
	0x0e, 0xf3, 0xed, 0x8e, 0x66, 0x68, 0x68, 0x5c, 0x37, 0xd4, 0x5a, 0xed, 0x89, 0x76, 0x98, 0xe7,
	0xe3, 0xd9, 0xd9, 0xc7, 0x9a, 0xf6, 0xb8, 0x41, 0x0a, 0x6a, 0xbb, 0x5e, 0x50, 0x5b, 0x2d, 0xcd,
	0x50, 0x8d, 0xba, 0xd6, 0xd2, 0x19, 0x7d, 0x36, 0xc7, 0x67, 0xe9, 0xbf, 0x72, 0xb7, 0x56, 0x30,
	0xea, 0x4d, 0xa2, 0x1b, 0x6a, 0xb3, 0xcd, 0x09, 0x66, 0xbc, 0x04, 0xa4, 0xd9, 0x36, 0xf8, 0x6e,
	0xd9, 0x97, 0x1f, 0xd7, 0x8d, 0xdd, 0x6e, 0xd9, 0xdc, 0xab, 0xf0, 0x58, 0x7b, 0xac, 0xd9, 0x54,
	0xb7, 0xf7, 0x97, 0xf3, 0x37, 0xf2, 0xcb, 0x74, 0x90, 0x8e, 0xd1, 0x5f, 0x6c, 0x15, 0xfe, 0x53,
	0x14, 0x46, 0xee, 0x30, 0xe9, 0xd0, 0x73, 0x30, 0xd4, 0xed, 0xd6, 0xab, 0x19, 0x65, 0x5e, 0x59,
	0x48, 0xae, 0xa7, 0x8f, 0x8f, 0x72, 0xc9, 0x6a, 0x79, 0x15, 0x9b, 0x63, 0xb8, 0x48, 0xa7, 0x4c,
	0x92, 0x96, 0xda, 0x24, 0x99, 0xa8, 0x9b, 0xc4, 0x1c, 0xc3, 0x45, 0x3a, 0x85, 0x96, 0x20, 0xa1,
	0x76, 0x2a, 0xbb, 0xf5, 0x7d, 0x52, 0xcd, 0xc4, 0xe6, 0x95, 0x85, 0xc4, 0xfa, 0xc4, 0xf1, 0x51,
	0x2e, 0x6d, 0x92, 0x59, 0xe3, 0xb8, 0x68, 0x93, 0xa0, 0x0d, 0x18, 0xaf, 0x92, 0x9a, 0xda, 0x6d,
	0x18, 0x25, 0x53, 0xdd, 0x0f, 0xb5, 0x16, 0xc9, 0x0c, 0x51, 0xee, 0x17, 0x8f, 0x8f, 0x72, 0x53,
	0xe6, 0x32, 0xef, 0x3c, 0x2e, 0x8e, 0xf1, 0xa1, 0x87, 0x7c, 0x04, 0xed, 0xc0, 0x05, 0x8b, 0xaa,
	0xaa, 0x1e, 0x96, 0x0e, 0x08, 0xd9, 0x2b, 0xe9, 0x86, 0xda, 0x31, 0xf4, 0xcc, 0x30, 0x65, 0x36,
	0x7f, 0x7c, 0x94, 0x9b, 0x15, 0x99, 0x79, 0xc8, 0x70, 0x71, 0x92, 0xcf, 0x6c, 0xa8, 0x87, 0x3b,
	0x84, 0xec, 0x3d, 0xa0, 0xc3, 0x28, 0x03, 0x23, 0xfb, 0xa4, 0xa3, 0xd7, 0xb5, 0x56, 0x26, 0x3e,
	0xaf, 0x2c, 0x0c, 0x17, 0xad, 0xbf, 0xf8, 0x43, 0x48, 0x71, 0xe0, 0xde, 0xae, 0xeb, 0x06, 0x7a,
	0x0d, 0x92, 0xcc, 0xca, 0x75, 0xa2, 0x67, 0x94, 0xf9, 0xd8, 0x42, 0x6a, 0xe5, 0x62, 0xde, 0xeb,
	0x00, 0x79, 0xbe, 0x62, 0x7d, 0xe8, 0xcb, 0xa3, 0x5c, 0xa4, 0xe8, 0xac, 0x40, 0x93, 0x30, 0xdc,
	0xa8, 0x37, 0xeb, 0x06, 0x45, 0x76, 0xb8, 0xc8, 0xfe, 0xa0, 0x69, 0x88, 0x6b, 0xb5, 0x9a, 0x4e,
	0x0c, 0x8a, 0xe4, 0x70, 0x91, 0xff, 0xc3, 0xeb, 0x80, 0x84, 0xbd, 0x8b, 0xe4, 0xfb, 0x5d, 0xa2,
	0x8b, 0xd4, 0x8a, 0x48, 0x2d, 0xe7, 0x8d, 0x9f, 0x29, 0x30, 0x79, 0xa7, 0x43, 0x54, 0x83, 0x70,
	0x56, 0x16, 0x1b, 0xc4, 0x6d, 0x4c, 0xdd, 0x80, 0x1b, 0xf5, 0x45, 0x89, 0x95, 0xa8, 0x0f, 0xf8,
	0x4d, 0x71, 0x33, 0xd8, 0x14, 0x31, 0xba, 0x42, 0x0a, 0x34, 0xbe, 0x0a, 0x13, 0x9b, 0xc4, 0xf0,
	0x8b, 0xe2, 0x78, 0x24, 0x73, 0x41, 0xbc, 0x02, 0xe9, 0xa2, 0x76, 0xa0, 0xdf, 0xab, 0x39, 0x6e,
	0x7b, 0x8e, 0xc3, 0x5b, 0xe2, 0xc4, 0xb1, 0x85, 0x64, 0x31, 0xc5, 0xc7, 0x1e, 0x99, 0x6b, 0xf2,
	0x90, 0x71, 0x98, 0xbf, 0xcb, 0x0c, 0xd8, 0x6b, 0x8f, 0x65, 0x18, 0x75, 0x13, 0xa3, 0x1c, 0x58,
	0x0c, 0x4b, 0xfb, 0xa4, 0xc3, 0x01, 0x86, 0x8a, 0x4d, 0x84, 0xff, 0x11, 0x85, 0xa1, 0x87, 0x44,
	0x6d, 0x86, 0x89, 0xa2, 0x5b, 0x1e, 0x89, 0x59, 0x34, 0x4d, 0x1d, 0x1f, 0xe5, 0x26, 0x4c, 0x52,
	0x71, 0x0e, 0xbb, 0x14, 0xb1, 0xe3, 0x2f, 0x16, 0x2e, 0xfe, 0x86, 0xfa, 0xc7, 0xdf, 0x12, 0x24,
	0x6c, 0x8b, 0xb2, 0x50, 0xb1, 0xc9, 0x9d, 0x78, 0xb3, 0x49, 0xd0, 0x6d, 0x18, 0xf3, 0x5a, 0x35,
	0x4e, 0x57, 0x65, 0x8e, 0x8f, 0x72, 0x93, 0x34, 0xc0, 0xbc, 0x81, 0x95, 0xae, 0xba, 0x22, 0xea,
	0x05, 0x18, 0xae, 0x68, 0x0d, 0xad, 0x93, 0x19, 0xa1, 0xeb, 0x46, 0x8f, 0x8f, 0x72, 0xc0, 0xb4,
	0x6e, 0x68, 0x1d, 0x5c, 0x64, 0x93, 0x62, 0xdc, 0x25, 0xdc, 0x71, 0xf7, 0x3b, 0x05, 0x26, 0x98,
	0xdf, 0x9a, 0x70, 0x5b, 0x56, 0xf4, 0x3b, 0x81, 0xe2, 0x71, 0x02, 0xdb, 0xaf, 0xa3, 0x82, 0x5f,
	0x67, 0x05, 0xed, 0x99, 0x77, 0x3a, 0xaa, 0x5e, 0xf1, 0xab, 0x4a, 0x13, 0x93, 0x57, 0xa1, 0x49,
	0x4b, 0x21, 0x0a, 0x1f, 0x57, 0x00, 0x6f, 0xc2, 0xe8, 0x26, 0x31, 0x06, 0x17, 0xd1, 0x71, 0x08,
	0xee, 0x8b, 0xef, 0x41, 0xc2, 0xe4, 0x42, 0x93, 0xcc, 0x0a, 0x0c, 0x1b, 0x44, 0x6d, 0x5a, 0x09,
	0x66, 0xda, 0x9f, 0x60, 0x4c, 0x52, 0x9e, 0x5d, 0x18, 0xa9, 0x88, 0x64, 0xd4, 0x8d, 0xe4, 0xcb,
	0x30, 0x66, 0x71, 0x0e, 0x2f, 0x23, 0xbe, 0x06, 0x53, 0x5c, 0xb1, 0x10, 0x81, 0xb4, 0x00, 0x29,
	0x81, 0x12, 0x5d, 0x84, 0x84, 0x29, 0x94, 0x10, 0x42, 0x23, 0x06, 0x9b, 0xc6, 0xd7, 0x61, 0x9a,
	0xb3, 0xd5, 0x43, 0xf0, 0xbd, 0x06, 0xe7, 0x44, 0x52, 0x34, 0x03, 0x49, 0xaa, 0xad, 0xc0, 0x99,
	0xee, 0x64, 0x12, 0xe0, 0x65, 0x98, 0xd9, 0x24, 0xc6, 0x8e, 0xd6, 0xd9, 0x23, 0x9d, 0x90, 0x72,
	0xaf, 0xc2, 0x84, 0x8f, 0x1e, 0x5d, 0x86, 0xd1, 0x03, 0x3a, 0xe8, 0xd1, 0x21, 0xed, 0x8c, 0x9a,
	0xdb, 0xfd, 0x32, 0x0a, 0xb1, 0x6d, 0xad, 0x1c, 0x26, 0x11, 0x2c, 0x49, 0x13, 0x01, 0x1c, 0x1f,
	0xe5, 0xe2, 0x26, 0xe9, 0x92, 0x27, 0xfa, 0x0b, 0x4c, 0x4b, 0x46, 0xcb, 0x52, 0x00, 0x3a, 0x3e,
	0xca, 0x8d, 0xd2, 0x60, 0xb5, 0x26, 0x30, 0xd3, 0xdc, 0x95, 0x2e, 0x86, 0xc2, 0xa5, 0x8b, 0xe1,
	0xfe, 0xe9, 0xc2, 0x8e, 0xde, 0x78, 0xc8, 0xe8, 0x1d, 0x71, 0xfb, 0xdc, 0x7d, 0x18, 0xdd, 0xd6,
	0xca, 0x83, 0xb9, 0x9c, 0x65, 0x5d, 0x01, 0x23, 0x47, 0x47, 0xfc, 0x31, 0x8c, 0xb3, 0x74, 0xb0,
	0xad, 0x95, 0xcf, 0x88, 0xa7, 0x9d, 0x2a, 0x62, 0x42, 0xaa, 0xb0, 0xc3, 0x7c, 0x48, 0x0c, 0xf3,
	0x0a, 0xa4, 0x37, 0x89, 0x21, 0x6c, 0x2d, 0xf1, 0x26, 0x9f, 0x38, 0xd1, 0x3e, 0xe2, 0xc4, 0x3c,
	0x2a, 0x3e, 0x84, 0x11, 0x0e, 0x1a, 0x2a, 0xc0, 0xd0, 0x13, 0xad, 0x6c, 0x25, 0x80, 0x29, 0x7f,
	0x02, 0xd8, 0xd6, 0xca, 0x3c, 0xfe, 0x29, 0x61, 0x8f, 0xf0, 0x5f, 0x84, 0x49, 0x26, 0x7a, 0x88,
	0x78, 0xb8, 0x0c, 0xe0, 0x10, 0xa2, 0x0b, 0x30, 0xf2, 0x44, 0x2b, 0x0b, 0x11, 0x10, 0x7f, 0x42,
	0x27, 0x79, 0x6e, 0xd8, 0xd6, 0xca, 0x7a, 0xb8, 0xdc, 0x20, 0x50, 0x9a, 0xb9, 0xc1, 0x14, 0x58,
	0xcc, 0x0d, 0x4f, 0xd8, 0x34, 0xfe, 0x43, 0x0c, 0x86, 0x1f, 0xec, 0xd6, 0x6b, 0xc6, 0x7f, 0x43,
	0x4c, 0xbd, 0x09, 0xc3, 0xb4, 0x1a, 0x50, 0x3f, 0x48, 0xad, 0x64, 0xf3, 0xec, 0x50, 0x9e, 0xb7,
	0x8e, 0xdb, 0xf9, 0x87, 0xd6, 0xa9, 0x7d, 0x7d, 0xda, 0xb4, 0x83, 0x15, 0x21, 0x74, 0x11, 0xfe,
	0xfc, 0x6f, 0x39, 0xa5, 0xc8, 0x18, 0xa0, 0xbb, 0x30, 0xa4, 0x1b, 0x5a, 0x9b, 0x86, 0x5d, 0x6f,
	0x46, 0x53, 0x9c, 0x51, 0x92, 0x31, 0xd2, 0xda, 0x8c, 0x0f, 0x5d, 0x6e, 0x6a, 0xd0, 0xd5, 0x49,
	0x87, 0x69, 0x10, 0x77, 0x6b, 0x60, 0x4f, 0xe0, 0x62, 0xc2, 0xfc, 0x4d, 0x35, 0xb8, 0x4e, 0x91,
	0x66, 0xf4, 0x23, 0xee, 0x92, 0x6f, 0x8d, 0x63, 0x0a, 0x3e, 0xa5, 0x7e, 0x09, 0x92, 0xed, 0x6e,
	0xb9, 0x51, 0xd7, 0x77, 0x49, 0x95, 0xd6, 0xe2, 0x84, 0xc3, 0xde, 0x9e, 0xc0, 0x45, 0x87, 0x08,
	0xff, 0x53, 0x81, 0x24, 0x35, 0x17, 0xf5, 0xd8, 0x9b, 0x10, 0xd7, 0xcd, 0x3f, 0x96, 0xcf, 0x5e,
	0xf0, 0xfb, 0x2c, 0x25, 0xe6, 0x5e, 0xcb, 0x89, 0xd1, 0x7d, 0x98, 0xa0, 0xbf, 0x58, 0xe9, 0x2d,
	0xa9, 0x35, 0x83, 0x74, 0xa8, 0x2d, 0x7b, 0x23, 0x95, 0x30, 0x99, 0x50, 0x70, 0xc6, 0xe8, 0x72,
	0x5a, 0xa3, 0xd7, 0xcc, 0xc5, 0xa8, 0x08, 0x48, 0xe4, 0x58, 0x26, 0x35, 0xad, 0xc3, 0x42, 0x3c,
	0x2c, 0xcb, 0x71, 0x87, 0xe5, 0x3a, 0x5d, 0x8d, 0xbf, 0x55, 0x60, 0xdc, 0x56, 0xf5, 0xac, 0xb2,
	0xcf, 0x8c, 0x68, 0x50, 0x9e, 0x0b, 0x6c, 0xe3, 0x5d, 0x14, 0x8c, 0xc7, 0x32, 0x91, 0x6d, 0xa9,
	0x45, 0x19, 0x64, 0xec, 0x50, 0xe2, 0x03, 0xe3, 0xba, 0x14, 0x0c, 0xea, 0x3d, 0x12, 0x35, 0x7f,
	0x1d, 0x85, 0x69, 0x56, 0x0f, 0xcf, 0x5c, 0xd9, 0x1c, 0xa4, 0x58, 0xf9, 0x14, 0xd5, 0x05, 0x36,
	0x44, 0x09, 0xa4, 0x8e, 0x30, 0x74, 0xf6, 0x8e, 0x30, 0x7c, 0x2a, 0x47, 0xf8, 0x4b, 0x14, 0x32,
	0xeb, 0xdd, 0xc6, 0xde, 0x7d, 0x16, 0x05, 0x14, 0x26, 0xfd, 0x3f, 0xed, 0x10, 0xf7, 0x83, 0x1c,
	0xe2, 0x8c, 0xa1, 0x8b, 0x9f, 0x06, 0x3a, 0x34, 0x2b, 0x26, 0x18, 0x33, 0x1f, 0x25, 0xc4, 0x64,
	0xf2, 0x9b, 0x28, 0x20, 0x56, 0xdf, 0x29, 0xa6, 0x67, 0x05, 0xe9, 0x6a, 0xf8, 0x2c, 0xee, 0xc8,
	0xce, 0xf3, 0xf6, 0xad, 0xd0, 0x79, 0xdb, 0x59, 0xca, 0x52, 0xf5, 0x8c, 0x2f, 0x55, 0x07, 0x18,
	0x72, 0xc4, 0x6d, 0xc8, 0x59, 0x5f, 0x0e, 0x16, 0x21, 0x22, 0x30, 0xb6, 0x49, 0x0c, 0x17, 0x3c,
	0xb2, 0x53, 0x48, 0x4f, 0x3c, 0xbc, 0x78, 0xc6, 0xfc, 0x07, 0xff, 0x67, 0x51, 0x18, 0xdd, 0xa8,
	0x77, 0x48, 0xc5, 0xd0, 0x3a, 0x87, 0x77, 0x5b, 0x46, 0xe7, 0xd0, 0xad, 0x8f, 0xe2, 0xd1, 0x27,
	0x07, 0xa9, 0x7a, 0xcb, 0x20, 0x9d, 0x96, 0xda, 0x28, 0xd9, 0x3b, 0x82, 0x35, 0xb4, 0x15, 0x66,
	0x4f, 0xfb, 0x20, 0x36, 0xec, 0x3e, 0x88, 0x91, 0xa6, 0x5a, 0x6f, 0x70, 0x00, 0xd9, 0x1f, 0xf4,
	0x12, 0x4c, 0x56, 0xb4, 0x56, 0xad, 0xde, 0x69, 0x92, 0x6a, 0x49, 0x6d, 0x55, 0x4b, 0x6a, 0xc5,
	0xa8, 0xef, 0x13, 0xee, 0x50, 0xc8, 0x9e, 0x5b, 0x6b, 0x55, 0xd7, 0xe8, 0x0c, 0x9a, 0x87, 0x54,
	0x7b, 0x57, 0x6b, 0x91, 0x56, 0xb7, 0x59, 0x26, 0x1d, 0x0a, 0x6b, 0xb2, 0x28, 0x0e, 0x99, 0xea,
	0xb5, 0x77, 0x35, 0x43, 0x2b, 0x75, 0x3b, 0x8d, 0x4c, 0x92, 0xa9, 0x47, 0x07, 0x1e, 0x75, 0x1a,
	0xf8, 0xb7, 0x0a, 0x4c, 0xbc, 0x43, 0x0e, 0x3c, 0x88, 0x9c, 0xf0, 0x1e, 0x6a, 0xeb, 0x14, 0x13,
	0x75, 0xf2, 0x48, 0x38, 0xe4, 0x97, 0xd0, 0x83, 0xf1, 0xb0, 0x17, 0x63, 0xbc, 0x03, 0x53, 0x6e,
	0x09, 0x07, 0x0b, 0x20, 0xc7, 0xba, 0x51, 0xb7, 0x75, 0xf1, 0x0f, 0x15, 0x48, 0xdb, 0x9c, 0x69,
	0xa1, 0x5f, 0x87, 0x84, 0x5a, 0xa9, 0x68, 0xdd, 0x96, 0x5d, 0xea, 0xe7, 0xfd, 0xa5, 0xde, 0x2d,
	0x0c, 0xaf, 0xf9, 0xf6, 0xba, 0x01, 0xdb, 0x60, 0x8f, 0x61, 0xd2, 0x25, 0xc2, 0x00, 0xba, 0x0d,
	0xb6, 0xd1, 0x5b, 0x90, 0xb2, 0x37, 0xda, 0xda, 0xf0, 0xa2, 0xae, 0xf8, 0x3c, 0xbb, 0x27, 0x72,
	0xff, 0x0f, 0x63, 0xac, 0x81, 0x65, 0xb3, 0x44, 0x6f, 0x42, 0xba, 0x6a, 0xfd, 0x29, 0xd5, 0xab,
	0x16, 0x7e, 0x97, 0x7a, 0xe0, 0xb7, 0xb5, 0xc1, 0xc1, 0x3b, 0x67, 0xaf, 0xdc, 0xaa, 0xea, 0xf8,
	0x06, 0x8c, 0xbb, 0x21, 0x0e, 0x21, 0x2e, 0xbe, 0x09, 0xe3, 0x6b, 0xd5, 0x66, 0xbd, 0x35, 0x60,
	0x27, 0xe0, 0xc7, 0x0a, 0xc4, 0xe9, 0x3a, 0x3d, 0x0c, 0xe2, 0xaf, 0x43, 0x5c, 0xa5, 0xc4, 0x99,
	0xe8, 0x40, 0xce, 0xc1, 0x57, 0x89, 0x17, 0x99, 0x98, 0xfb, 0x22, 0xb3, 0x04, 0xa3, 0x54, 0x8c,
	0x7b, 0x35, 0x4b, 0xf8, 0x5e, 0x79, 0x09, 0xd7, 0x21, 0xc5, 0xc9, 0xa9, 0xdb, 0xf6, 0xcc, 0x61,
	0xae, 0xae, 0x6e, 0x74, 0xd0, 0xae, 0x2e, 0xc6, 0x00, 0x74, 0xab, 0xbb, 0x1f, 0x98, 0x3b, 0x99,
	0x41, 0x6e, 0xfe, 0xa0, 0xbb, 0x24, 0x8a, 0xec, 0x0f, 0x5e, 0x82, 0x0b, 0x9b, 0xc4, 0x60, 0x38,
	0x86, 0xb8, 0x35, 0xe5, 0x21, 0xed, 0xa2, 0x45, 0x97, 0x00, 0x18, 0x42, 0xc2, 0xcd, 0x29, 0xa9,
	0x5a, 0x24, 0xf8, 0x81, 0xd5, 0xc9, 0x38, 0xcb, 0x3b, 0xf7, 0xef, 0x15, 0x18, 0x61, 0x5c, 0xf5,
	0x53, 0x57, 0xe2, 0xdb, 0x30, 0xc2, 0x4e, 0x7b, 0x7a, 0x26, 0x36, 0x90, 0x63, 0x58, 0xcb, 0x44,
	0xcf, 0x18, 0x72, 0x7b, 0xc6, 0x0f, 0x20, 0xce, 0xc4, 0xfc, 0xf7, 0x1e, 0xc1, 0x82, 0x05, 0xc8,
	0xc3, 0x18, 0x13, 0x20, 0xa4, 0x6f, 0x96, 0xe0, 0x9c, 0x45, 0xdf, 0xdf, 0x39, 0xed, 0x6e, 0x60,
	0x34, 0x74, 0x37, 0x10, 0x3f, 0x0f, 0x29, 0xb6, 0x41, 0x2f, 0x97, 0x64, 0xed, 0x72, 0x6e, 0xe0,
	0x70, 0xed, 0x72, 0x37, 0xb1, 0x73, 0xaa, 0x17, 0xbd, 0x92, 0x9f, 0xea, 0xa9, 0x5b, 0x7e, 0xa1,
	0x40, 0x6a, 0x4d, 0xd7, 0xb5, 0x4a, 0x9d, 0x3e, 0x81, 0x99, 0x5e, 0xc0, 0x8b, 0x00, 0x25, 0x1e,
	0xc0, 0x0b, 0xf8, 0xb2, 0x93, 0xa0, 0x61, 0xaa, 0x4f, 0x23, 0x85, 0x3d, 0x54, 0x15, 0xd9, 0x1f,
	0xfc, 0x89, 0x02, 0x63, 0x82, 0x6c, 0xd4, 0x10, 0x6f, 0xf8, 0x8a, 0x9b, 0x24, 0x39, 0x0b, 0x8b,
	0x4e, 0x59, 0xd9, 0xae, 0xc3, 0x39, 0xf3, 0x14, 0xf9, 0xbe, 0xd6, 0x22, 0x74, 0xfb, 0x59, 0x48,
	0x5a, 0x7d, 0x69, 0x9d, 0x3f, 0x70, 0x38, 0x03, 0x78, 0x0a, 0xce, 0x8b, 0xd4, 0xdc, 0x54, 0xf8,
	0x55, 0x18, 0x7f, 0x50, 0xd9, 0x25, 0xd5, 0x6e, 0x83, 0x54, 0xef, 0x93, 0xce, 0x0e, 0x21, 0x7b,
	0xa6, 0xf9, 0x0e, 0x08, 0xd9, 0xb3, 0xcc, 0x67, 0xfe, 0x66, 0x9d, 0x2d, 0x13, 0x79, 0x2e, 0x1a,
	0xfd, 0x83, 0x3f, 0x8b, 0xc2, 0xf9, 0xcd, 0x8e, 0x76, 0x60, 0xec, 0x6e, 0x76, 0xd4, 0xf6, 0x6e,
	0x91, 0xe8, 0x6d, 0xad, 0xa5, 0x13, 0xf4, 0x31, 0x5c, 0x6c, 0x13, 0xad, 0xdd, 0x20, 0x25, 0xdd,
	0x62, 0x5e, 0x6a, 0x93, 0x4e, 0x89, 0xb3, 0x35, 0xa1, 0x59, 0xf3, 0x43, 0x23, 0xe1, 0x94, 0xbf,
	0x4f, 0xd9, 0x78, 0x45, 0x64, 0xa7, 0x94, 0xe9, 0xb6, 0x74, 0x12, 0x2d, 0xc0, 0x38, 0xdf, 0x5d,
	0x6b, 0x95, 0x78, 0x5f, 0x81, 0x89, 0x3d, 0xca, 0xc6, 0xef, 0xb5, 0xd8, 0xdd, 0x2b, 0xbb, 0x05,
	0x33, 0x3d, 0x36, 0x40, 0xe3, 0x10, 0xdb, 0x23, 0x87, 0x1c, 0x07, 0xf3, 0xa7, 0x09, 0xc3, 0xbe,
	0xda, 0xe8, 0x12, 0x0b, 0x06, 0xfa, 0x67, 0x35, 0x7a, 0x4b, 0xc1, 0x93, 0x80, 0x5c, 0xf2, 0x33,
	0x78, 0x6f, 0xc2, 0xf4, 0x56, 0x6b, 0x5f, 0x6d, 0xd4, 0xab, 0xaa, 0x41, 0xee, 0xa8, 0x95, 0x5d,
	0x12, 0x26, 0xc4, 0x57, 0x3e, 0xbd, 0x66, 0x3f, 0x2e, 0x3d, 0x20, 0x9d, 0xfd, 0x7a, 0x85, 0xa0,
	0x06, 0xa4, 0x5d, 0x2f, 0x71, 0xe8, 0x8a, 0xa4, 0xc6, 0x48, 0x9e, 0xea, 0xb2, 0xc1, 0xb5, 0x08,
	0x67, 0x7e, 0xf4, 0xe7, 0x6f, 0x7f, 0x11, 0x45, 0x38, 0x5d, 0xd8, 0x5f, 0x2e, 0xd8, 0x15, 0x69,
	0x55, 0x59, 0x44, 0xef, 0x42, 0xda, 0xf4, 0x92, 0x3b, 0xf6, 0xdb, 0xe3, 0x0b, 0x81, 0x5c, 0x04,
	0x6f, 0xca, 0x5e, 0xea, 0x49, 0x85, 0x23, 0xe8, 0x1d, 0x00, 0xe7, 0x91, 0x0d, 0x3d, 0x2f, 0xf1,
	0x01, 0xef, 0xfb, 0x5e, 0x2f, 0xf9, 0x23, 0xa8, 0x06, 0xe9, 0x47, 0xed, 0xaa, 0x80, 0x4a, 0x30,
	0x75, 0x2f, 0x46, 0x39, 0x0a, 0xc4, 0xc5, 0xec, 0xa4, 0x0b, 0x88, 0xc2, 0x47, 0xa6, 0x71, 0x9e,
	0x9a, 0x78, 0x7c, 0x00, 0xe0, 0xbc, 0x27, 0xc9, 0xe4, 0xf6, 0xbd, 0x36, 0x65, 0x03, 0x92, 0x0b,
	0x5e, 0xa2, 0x7b, 0x5d, 0xc5, 0xd8, 0xb3, 0x97, 0x58, 0x7a, 0x9e, 0x16, 0x68, 0xee, 0x31, 0x77,
	0x7e, 0x1b, 0x92, 0x26, 0x76, 0xf4, 0x25, 0x03, 0x3d, 0x27, 0xe7, 0x29, 0x9a, 0x20, 0x1b, 0x4c,
	0x82, 0x23, 0xe8, 0x2e, 0x8c, 0xf0, 0x17, 0x14, 0x34, 0x2f, 0x05, 0x3f, 0x8c, 0x06, 0x11, 0xd4,
	0x01, 0x60, 0xb0, 0x53, 0x4e, 0x01, 0x74, 0x81, 0xeb, 0x5f, 0xa6, 0x08, 0xe4, 0xb3, 0x2f, 0xf6,
	0x47, 0x40, 0x30, 0xc1, 0x16, 0x7d, 0xfc, 0x75, 0x5e, 0x5c, 0xb6, 0x5a, 0x35, 0x0d, 0x65, 0xfc,
	0x5b, 0x30, 0x8a, 0x6c, 0xe0, 0x0c, 0x8e, 0xa0, 0x4f, 0x15, 0x48, 0xda, 0xef, 0x01, 0x08, 0x07,
	0x59, 0xd3, 0xe9, 0xd8, 0x67, 0xe5, 0x4d, 0x74, 0xfc, 0x3a, 0xd5, 0xe4, 0x16, 0xbe, 0x11, 0x46,
	0x13, 0xfb, 0xe0, 0xf0, 0xb4, 0xf0, 0x44, 0x2b, 0xeb, 0x4c, 0xa7, 0x84, 0x69, 0x98, 0x6d, 0xad,
	0xac, 0xcb, 0xec, 0xe1, 0x7e, 0x05, 0x91, 0x39, 0x30, 0xa7, 0xc0, 0x11, 0xb4, 0x0e, 0x71, 0xd6,
	0x56, 0x47, 0x39, 0xa9, 0x61, 0xfb, 0x2b, 0x13, 0x41, 0x9f, 0x28, 0x90, 0x64, 0x76, 0x35, 0xf9,
	0xc8, 0xc9, 0x82, 0x56, 0xdf, 0xa5, 0x50, 0xbc, 0x91, 0x5d, 0x3d, 0x01, 0x14, 0x82, 0x95, 0x7f,
	0xae, 0x40, 0x4a, 0x68, 0xe5, 0x48, 0xf3, 0x8e, 0xaf, 0xd3, 0x93, 0x0d, 0xea, 0x17, 0xe3, 0xdb,
	0x54, 0xaa, 0x55, 0x7c, 0x73, 0x40, 0xa9, 0x58, 0xd5, 0x30, 0x05, 0x7a, 0xa6, 0x00, 0x98, 0x10,
	0xb3, 0x8a, 0x21, 0x73, 0x16, 0x6f, 0xbb, 0x33, 0x3b, 0xd3, 0x83, 0x06, 0xbf, 0x46, 0x25, 0x7a,
	0x05, 0x9d, 0x4c, 0x22, 0xf4, 0x47, 0x05, 0xc6, 0x4d, 0x3e, 0x42, 0xa7, 0x55, 0x47, 0x0b, 0x41,
	0xbe, 0x3e, 0x98, 0x68, 0x0f, 0xa8, 0x68, 0xff, 0x87, 0xde, 0x1a, 0x50, 0x34, 0x7e, 0x64, 0x2b,
	0x7c, 0x24, 0x34, 0x69, 0x6d, 0x81, 0x7f, 0xa5, 0xc0, 0x84, 0xaf, 0xe9, 0x89, 0x16, 0xfd, 0x72,
	0x04, 0x75, 0x46, 0x7b, 0xcb, 0xcc, 0x0d, 0x9c, 0x3d, 0x95, 0x81, 0x13, 0x56, 0x6b, 0x4c, 0x96,
	0x60, 0x3d, 0x6d, 0xb3, 0x60, 0x5f, 0xdb, 0xa0, 0xa2, 0xbc, 0x8e, 0x5e, 0x3d, 0x91, 0x28, 0x3c,
	0x06, 0x68, 0x00, 0x6c, 0x90, 0x06, 0xb1, 0x02, 0x20, 0x84, 0x44, 0xd3, 0xbe, 0xee, 0xe2, 0xdd,
	0x66, 0xdb, 0x38, 0xb4, 0x04, 0x5a, 0x3c, 0x9d, 0x40, 0x9f, 0x29, 0x90, 0x62, 0x49, 0x81, 0x09,
	0x14, 0xa4, 0x7f, 0x30, 0x30, 0x9b, 0x54, 0x8e, 0xb5, 0xec, 0xa9, 0xe4, 0x30, 0x4d, 0xf5, 0x53,
	0x05, 0xc6, 0x58, 0xf4, 0x3b, 0x6d, 0x11, 0x49, 0x2d, 0xf6, 0x75, 0xdc, 0xb2, 0x7d, 0x2f, 0x0a,
	0x78, 0x99, 0xca, 0x78, 0x0d, 0x5f, 0xe9, 0x29, 0xa3, 0xdd, 0x46, 0x61, 0x67, 0xa4, 0xa4, 0x23,
	0xc6, 0x95, 0x1e, 0x3b, 0x88, 0x01, 0x98, 0xeb, 0x43, 0x87, 0x23, 0xe8, 0xbb, 0xb4, 0x55, 0x2b,
	0xdc, 0x13, 0xf4, 0xd0, 0xdc, 0x9f, 0xeb, 0x79, 0xdf, 0xe0, 0xfc, 0xbf, 0x47, 0x0b, 0xa9, 0xa7,
	0x27, 0x79, 0xb5, 0x1f, 0x42, 0xd6, 0x16, 0xfd, 0xa1, 0x8c, 0xa0, 0x2f, 0x14, 0x98, 0x64, 0x2e,
	0xe3, 0xd9, 0xa5, 0xef, 0xe2, 0x10, 0xec, 0x79, 0x02, 0xcd, 0xae, 0x84, 0xb3, 0x54, 0xe1, 0x23,
	0xfb, 0x98, 0xfd, 0x94, 0x9d, 0xa7, 0x68, 0x3a, 0xe7, 0x3d, 0x29, 0x49, 0x3a, 0xf7, 0x76, 0xb9,
	0x64, 0x27, 0x09, 0xb6, 0x1a, 0x47, 0x68, 0x70, 0x30, 0x8f, 0xa4, 0x43, 0x67, 0x09, 0x63, 0x9e,
	0xea, 0xb9, 0x80, 0x9f, 0xef, 0xa9, 0x27, 0x6b, 0xe2, 0x98, 0x8a, 0xed, 0xd0, 0x34, 0x76, 0xe6,
	0x62, 0x44, 0xd0, 0x4f, 0xec, 0x8c, 0x34, 0x20, 0xf3, 0xa0, 0xbc, 0xf4, 0x0a, 0xd5, 0x6c, 0x79,
	0xb1, 0x10, 0x42, 0x33, 0xd1, 0x7c, 0xe8, 0x1e, 0xa4, 0x9c, 0xda, 0xa7, 0xcb, 0x42, 0xdf, 0xd7,
	0xc6, 0x92, 0x1d, 0x9a, 0xf8, 0x7a, 0x1c, 0x41, 0x5b, 0x90, 0xb4, 0xcf, 0x94, 0x3d, 0xce, 0x92,
	0x61, 0x50, 0x7a, 0xa6, 0xc0, 0x39, 0x86, 0x52, 0x5f, 0x76, 0x41, 0xb8, 0x6c, 0x53, 0x5c, 0x36,
	0x16, 0xd7, 0x4f, 0x5a, 0x7f, 0x05, 0xa8, 0x7e, 0xa6, 0xc0, 0x39, 0xe6, 0x98, 0x67, 0xa0, 0xdd,
	0x1a, 0x15, 0xec, 0x7f, 0xf1, 0xff, 0x9c, 0x4c, 0x30, 0xd3, 0x3b, 0x9b, 0xec, 0x42, 0x69, 0xb5,
	0x20, 0x74, 0x74, 0x59, 0x72, 0x39, 0xf0, 0xf7, 0x27, 0xb2, 0x73, 0xbd, 0xc9, 0xf0, 0x14, 0x15,
	0x6d, 0x0c, 0xd1, 0x2b, 0xac, 0xdd, 0xed, 0x40, 0x5d, 0x48, 0x09, 0xb7, 0x71, 0xd9, 0x29, 0xd2,
	0x7f, 0x59, 0xcf, 0x5e, 0x0e, 0xd5, 0x92, 0xc0, 0x17, 0xe9, 0x96, 0xe7, 0xd1, 0x84, 0xb9, 0xa5,
	0xd5, 0x21, 0x2f, 0xec, 0xb5, 0xeb, 0x3a, 0x2a, 0x42, 0xca, 0xf6, 0xa7, 0x7b, 0x35, 0x59, 0xed,
	0xf6, 0x74, 0xfa, 0x64, 0xfa, 0x89, 0xcd, 0x3d, 0x1c, 0x41, 0xf7, 0xe8, 0x95, 0x99, 0x77, 0xa3,
	0x65, 0x19, 0xd4, 0xdd, 0xd7, 0x96, 0xdd, 0xc1, 0x85, 0x56, 0x36, 0x8e, 0xa0, 0xf7, 0x61, 0xcc,
	0xb9, 0xdb, 0x1f, 0x16, 0xb5, 0x83, 0xb0, 0xb7, 0x7b, 0x49, 0xed, 0x72, 0x7d, 0x65, 0xcb, 0x6a,
	0x8b, 0xb9, 0xc2, 0xf6, 0x1f, 0xca, 0xfd, 0x14, 0xd5, 0xcb, 0xf3, 0x08, 0x82, 0x23, 0xa8, 0x0a,
	0xe7, 0x7d, 0xd5, 0x6b, 0x6b, 0x23, 0x7c, 0x52, 0xc2, 0xfd, 0x08, 0xb7, 0x36, 0x70, 0x04, 0xbd,
	0x47, 0x3f, 0xd9, 0x12, 0xfa, 0xf2, 0xa1, 0xf9, 0xcf, 0x06, 0xc0, 0x4f, 0xd9, 0xe0, 0x08, 0x7a,
	0x8b, 0x7e, 0xf3, 0xc9, 0x6c, 0x4c, 0x3b, 0xa9, 0x3d, 0x22, 0xf3, 0x52, 0xd0, 0x8c, 0xc5, 0xec,
	0x11, 0x8c, 0x79, 0xda, 0x4b, 0xb2, 0xbb, 0x80, 0xbc, 0x03, 0x15, 0x98, 0x86, 0x22, 0xa8, 0x22,
	0x5c, 0xb5, 0xed, 0x76, 0xed, 0xa2, 0xf4, 0x20, 0x2a, 0x6d, 0x00, 0xcb, 0x52, 0x8a, 0x9b, 0x90,
	0xba, 0xe1, 0xa8, 0xfb, 0x3b, 0x30, 0x19, 0xc6, 0xd2, 0x2f, 0xc5, 0x64, 0xb8, 0x08, 0x54, 0x38,
	0x82, 0x76, 0xac, 0x2f, 0xee, 0x2c, 0xd6, 0x57, 0x82, 0x58, 0x7b, 0x38, 0xcf, 0x4a, 0x39, 0x3b,
	0x8c, 0x2b, 0xe2, 0x17, 0xe8, 0xbd, 0x91, 0x91, 0x7e, 0x49, 0x2e, 0x43, 0xc6, 0x4d, 0x88, 0x23,
	0xe8, 0x3b, 0xf4, 0x00, 0xe8, 0xfa, 0x76, 0x75, 0x21, 0xb0, 0x59, 0xe3, 0xc5, 0x66, 0x4e, 0xde,
	0x74, 0xf1, 0x01, 0x2f, 0x7e, 0xb4, 0x7a, 0x35, 0x90, 0x7b, 0x7f, 0xe0, 0x05, 0x2a, 0x1a, 0xff,
	0xe3, 0xde, 0x87, 0x2a, 0xf4, 0xa2, 0x94, 0xbb, 0xec, 0x31, 0x4b, 0x96, 0x61, 0x5c, 0x74, 0x38,
	0x82, 0x1a, 0xf4, 0x8b, 0x44, 0xff, 0x87, 0xb7, 0x4b, 0x3d, 0xdc, 0x53, 0xa2, 0x49, 0xe0, 0xd9,
	0xc1, 0xa5, 0xcf, 0xfa, 0xf2, 0x97, 0x5f, 0xcf, 0x29, 0x5f, 0x7d, 0x3d, 0xa7, 0xfc, 0xfd, 0xeb,
	0x39, 0xe5, 0xf3, 0x6f, 0xe6, 0x22, 0x5f, 0x7d, 0x33, 0x17, 0xf9, 0xeb, 0x37, 0x73, 0x91, 0xf7,
	0x2f, 0xec, 0xaf, 0xb8, 0x58, 0xf0, 0xba, 0x78, 0x58, 0x8e, 0xd3, 0x70, 0xba, 0xf1, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x5a, 0x87, 0x34, 0xb7, 0xe9, 0x33, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyServiceClient interface {
	// companies
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	// teams
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error)
	ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error)
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	// jobs
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	// shifts
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error)
	GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error)
	// Directory
	CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error)
	GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error)
	GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// Admins
	ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error)
	CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Workers
	ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error)
	GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error)
	GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error)
	GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error)
	ListCompanyRows(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*RowsOfCompany, error)
	ListDirectoryRows(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*RowsOfDirectory, error)
	GetDirectoryEntryID(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntryID, error)
	GetAdminExist(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*AdminExist, error)
	GetWorkerexist(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*WorkerExist, error)
	InvalidateCache(ctx context.Context, in *InvalidateCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWorkersVersion(ctx context.Context, in *GetWorkersVersionRequest, opts ...grpc.CallOption) (*WorkersVersion, error)
	GetJobsVersion(ctx context.Context, in *GetJobsVersionRequest, opts ...grpc.CallOption) (*JobsVersion, error)
	GetJobVersion(ctx context.Context, in *GetJobVersionRequest, opts ...grpc.CallOption) (*JobVersion, error)
	GetCompanyVersion(ctx context.Context, in *GetCompanyVersionRequest, opts ...grpc.CallOption) (*CompanyVersion, error)
	GetTeamsVersion(ctx context.Context, in *GetTeamsVersionRequest, opts ...grpc.CallOption) (*TeamsVersion, error)
	GetTeamVersion(ctx context.Context, in *GetTeamVersionRequest, opts ...grpc.CallOption) (*TeamVersion, error)
	GetAdminsVersion(ctx context.Context, in *GetAdminsVersionRequest, opts ...grpc.CallOption) (*AdminsVersion, error)
	GetWorkerTeamVersion(ctx context.Context, in *GetWorkerTeamVersionRequest, opts ...grpc.CallOption) (*WorkerTeamVersion, error)
}

type companyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompanyServiceClient(cc *grpc.ClientConn) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error) {
	out := new(TeamList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerTeamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkerShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/BulkPublishShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error) {
	out := new(DirectoryList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/Directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error) {
	out := new(AssociationList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetDirectoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateDirectoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error) {
	out := new(Admins)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error) {
	out := new(Workers)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error) {
	out := new(TimeZoneList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTimeZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error) {
	out := new(GrowthGraphResponse)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GrowthGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error) {
	out := new(WorkerOfList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error) {
	out := new(AdminOfList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdminOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanyRows(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*RowsOfCompany, error) {
	out := new(RowsOfCompany)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListCompanyRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListDirectoryRows(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*RowsOfDirectory, error) {
	out := new(RowsOfDirectory)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListDirectoryRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetDirectoryEntryID(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntryID, error) {
	out := new(DirectoryEntryID)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetDirectoryEntryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdminExist(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*AdminExist, error) {
	out := new(AdminExist)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdminExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerexist(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*WorkerExist, error) {
	out := new(WorkerExist)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerexist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) InvalidateCache(ctx context.Context, in *InvalidateCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/InvalidateCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkersVersion(ctx context.Context, in *GetWorkersVersionRequest, opts ...grpc.CallOption) (*WorkersVersion, error) {
	out := new(WorkersVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkersVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJobsVersion(ctx context.Context, in *GetJobsVersionRequest, opts ...grpc.CallOption) (*JobsVersion, error) {
	out := new(JobsVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetJobsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJobVersion(ctx context.Context, in *GetJobVersionRequest, opts ...grpc.CallOption) (*JobVersion, error) {
	out := new(JobVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetJobVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyVersion(ctx context.Context, in *GetCompanyVersionRequest, opts ...grpc.CallOption) (*CompanyVersion, error) {
	out := new(CompanyVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetCompanyVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetTeamsVersion(ctx context.Context, in *GetTeamsVersionRequest, opts ...grpc.CallOption) (*TeamsVersion, error) {
	out := new(TeamsVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetTeamsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetTeamVersion(ctx context.Context, in *GetTeamVersionRequest, opts ...grpc.CallOption) (*TeamVersion, error) {
	out := new(TeamVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetTeamVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdminsVersion(ctx context.Context, in *GetAdminsVersionRequest, opts ...grpc.CallOption) (*AdminsVersion, error) {
	out := new(AdminsVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdminsVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerTeamVersion(ctx context.Context, in *GetWorkerTeamVersionRequest, opts ...grpc.CallOption) (*WorkerTeamVersion, error) {
	out := new(WorkerTeamVersion)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerTeamVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
type CompanyServiceServer interface {
	// companies
	CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error)
	ListCompanies(context.Context, *CompanyListRequest) (*CompanyList, error)
	GetCompany(context.Context, *GetCompanyRequest) (*Company, error)
	UpdateCompany(context.Context, *Company) (*Company, error)
	// teams
	CreateTeam(context.Context, *CreateTeamRequest) (*Team, error)
	ListTeams(context.Context, *TeamListRequest) (*TeamList, error)
	GetTeam(context.Context, *GetTeamRequest) (*Team, error)
	UpdateTeam(context.Context, *Team) (*Team, error)
	GetWorkerTeamInfo(context.Context, *Worker) (*Worker, error)
	// jobs
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	ListJobs(context.Context, *JobListRequest) (*JobList, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	UpdateJob(context.Context, *Job) (*Job, error)
	// shifts
	CreateShift(context.Context, *CreateShiftRequest) (*Shift, error)
	ListShifts(context.Context, *ShiftListRequest) (*ShiftList, error)
	ListWorkerShifts(context.Context, *WorkerShiftListRequest) (*ShiftList, error)
	BulkPublishShifts(context.Context, *BulkPublishShiftsRequest) (*ShiftList, error)
	GetShift(context.Context, *GetShiftRequest) (*Shift, error)
	DeleteShift(context.Context, *GetShiftRequest) (*emptypb.Empty, error)
	UpdateShift(context.Context, *Shift) (*Shift, error)
	// Directory
	CreateDirectory(context.Context, *NewDirectoryEntry) (*DirectoryEntry, error)
	Directory(context.Context, *DirectoryListRequest) (*DirectoryList, error)
	GetAssociations(context.Context, *DirectoryListRequest) (*AssociationList, error)
	GetDirectoryEntry(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	UpdateDirectoryEntry(context.Context, *DirectoryEntry) (*DirectoryEntry, error)
	// Admins
	ListAdmins(context.Context, *AdminListRequest) (*Admins, error)
	CreateAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	GetAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	DeleteAdmin(context.Context, *DirectoryEntryRequest) (*emptypb.Empty, error)
	// Workers
	ListWorkers(context.Context, *WorkerListRequest) (*Workers, error)
	GetWorker(context.Context, *Worker) (*DirectoryEntry, error)
	DeleteWorker(context.Context, *Worker) (*emptypb.Empty, error)
	CreateWorker(context.Context, *Worker) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(context.Context, *TimeZoneListRequest) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(context.Context, *GrowthGraphRequest) (*GrowthGraphResponse, error)
	GetWorkerOf(context.Context, *WorkerOfRequest) (*WorkerOfList, error)
	GetAdminOf(context.Context, *AdminOfRequest) (*AdminOfList, error)
	ListCompanyRows(context.Context, *CompanyListRequest) (*RowsOfCompany, error)
	ListDirectoryRows(context.Context, *DirectoryListRequest) (*RowsOfDirectory, error)
	GetDirectoryEntryID(context.Context, *DirectoryEntryRequest) (*DirectoryEntryID, error)
	GetAdminExist(context.Context, *DirectoryEntryRequest) (*AdminExist, error)
	GetWorkerexist(context.Context, *Worker) (*WorkerExist, error)
	InvalidateCache(context.Context, *InvalidateCacheRequest) (*emptypb.Empty, error)
	GetWorkersVersion(context.Context, *GetWorkersVersionRequest) (*WorkersVersion, error)
	GetJobsVersion(context.Context, *GetJobsVersionRequest) (*JobsVersion, error)
	GetJobVersion(context.Context, *GetJobVersionRequest) (*JobVersion, error)
	GetCompanyVersion(context.Context, *GetCompanyVersionRequest) (*CompanyVersion, error)
	GetTeamsVersion(context.Context, *GetTeamsVersionRequest) (*TeamsVersion, error)
	GetTeamVersion(context.Context, *GetTeamVersionRequest) (*TeamVersion, error)
	GetAdminsVersion(context.Context, *GetAdminsVersionRequest) (*AdminsVersion, error)
	GetWorkerTeamVersion(context.Context, *GetWorkerTeamVersionRequest) (*WorkerTeamVersion, error)
}

// UnimplementedCompanyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (*UnimplementedCompanyServiceServer) CreateCompany(ctx context.Context, req *CreateCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) ListCompanies(ctx context.Context, req *CompanyListRequest) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (*UnimplementedCompanyServiceServer) GetCompany(ctx context.Context, req *GetCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateCompany(ctx context.Context, req *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateTeam(ctx context.Context, req *CreateTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedCompanyServiceServer) ListTeams(ctx context.Context, req *TeamListRequest) (*TeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedCompanyServiceServer) GetTeam(ctx context.Context, req *GetTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateTeam(ctx context.Context, req *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkerTeamInfo(ctx context.Context, req *Worker) (*Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerTeamInfo not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateJob(ctx context.Context, req *CreateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedCompanyServiceServer) ListJobs(ctx context.Context, req *JobListRequest) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedCompanyServiceServer) GetJob(ctx context.Context, req *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateJob(ctx context.Context, req *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateShift(ctx context.Context, req *CreateShiftRequest) (*Shift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShift not implemented")
}
func (*UnimplementedCompanyServiceServer) ListShifts(ctx context.Context, req *ShiftListRequest) (*ShiftList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShifts not implemented")
}
func (*UnimplementedCompanyServiceServer) ListWorkerShifts(ctx context.Context, req *WorkerShiftListRequest) (*ShiftList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkerShifts not implemented")
}
func (*UnimplementedCompanyServiceServer) BulkPublishShifts(ctx context.Context, req *BulkPublishShiftsRequest) (*ShiftList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkPublishShifts not implemented")
}
func (*UnimplementedCompanyServiceServer) GetShift(ctx context.Context, req *GetShiftRequest) (*Shift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShift not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteShift(ctx context.Context, req *GetShiftRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShift not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateShift(ctx context.Context, req *Shift) (*Shift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShift not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateDirectory(ctx context.Context, req *NewDirectoryEntry) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (*UnimplementedCompanyServiceServer) Directory(ctx context.Context, req *DirectoryListRequest) (*DirectoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Directory not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAssociations(ctx context.Context, req *DirectoryListRequest) (*AssociationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociations not implemented")
}
func (*UnimplementedCompanyServiceServer) GetDirectoryEntry(ctx context.Context, req *DirectoryEntryRequest) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryEntry not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateDirectoryEntry(ctx context.Context, req *DirectoryEntry) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirectoryEntry not implemented")
}
func (*UnimplementedCompanyServiceServer) ListAdmins(ctx context.Context, req *AdminListRequest) (*Admins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmins not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateAdmin(ctx context.Context, req *DirectoryEntryRequest) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAdmin(ctx context.Context, req *DirectoryEntryRequest) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteAdmin(ctx context.Context, req *DirectoryEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (*UnimplementedCompanyServiceServer) ListWorkers(ctx context.Context, req *WorkerListRequest) (*Workers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorker(ctx context.Context, req *Worker) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteWorker(ctx context.Context, req *Worker) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorker not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateWorker(ctx context.Context, req *Worker) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (*UnimplementedCompanyServiceServer) ListTimeZones(ctx context.Context, req *TimeZoneListRequest) (*TimeZoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeZones not implemented")
}
func (*UnimplementedCompanyServiceServer) GrowthGraph(ctx context.Context, req *GrowthGraphRequest) (*GrowthGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrowthGraph not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkerOf(ctx context.Context, req *WorkerOfRequest) (*WorkerOfList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerOf not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAdminOf(ctx context.Context, req *AdminOfRequest) (*AdminOfList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminOf not implemented")
}
func (*UnimplementedCompanyServiceServer) ListCompanyRows(ctx context.Context, req *CompanyListRequest) (*RowsOfCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyRows not implemented")
}
func (*UnimplementedCompanyServiceServer) ListDirectoryRows(ctx context.Context, req *DirectoryListRequest) (*RowsOfDirectory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectoryRows not implemented")
}
func (*UnimplementedCompanyServiceServer) GetDirectoryEntryID(ctx context.Context, req *DirectoryEntryRequest) (*DirectoryEntryID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryEntryID not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAdminExist(ctx context.Context, req *DirectoryEntryRequest) (*AdminExist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminExist not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkerexist(ctx context.Context, req *Worker) (*WorkerExist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerexist not implemented")
}
func (*UnimplementedCompanyServiceServer) InvalidateCache(ctx context.Context, req *InvalidateCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCache not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkersVersion(ctx context.Context, req *GetWorkersVersionRequest) (*WorkersVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkersVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetJobsVersion(ctx context.Context, req *GetJobsVersionRequest) (*JobsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobsVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetJobVersion(ctx context.Context, req *GetJobVersionRequest) (*JobVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetCompanyVersion(ctx context.Context, req *GetCompanyVersionRequest) (*CompanyVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetTeamsVersion(ctx context.Context, req *GetTeamsVersionRequest) (*TeamsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamsVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetTeamVersion(ctx context.Context, req *GetTeamVersionRequest) (*TeamVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAdminsVersion(ctx context.Context, req *GetAdminsVersionRequest) (*AdminsVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminsVersion not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkerTeamVersion(ctx context.Context, req *GetWorkerTeamVersionRequest) (*WorkerTeamVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerTeamVersion not implemented")
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanies(ctx, req.(*CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTeams(ctx, req.(*TeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListJobs(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListShifts(ctx, req.(*ShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkerShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkerShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, req.(*WorkerShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_BulkPublishShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPublishShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/BulkPublishShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, req.(*BulkPublishShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateShift(ctx, req.(*Shift))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, req.(*NewDirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Directory(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAssociations(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, req.(*DirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListAdmins(ctx, req.(*AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkers(ctx, req.(*WorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTimeZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTimeZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, req.(*TimeZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GrowthGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrowthGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GrowthGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, req.(*GrowthGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, req.(*WorkerOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdminOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdminOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, req.(*AdminOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanyRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanyRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListCompanyRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanyRows(ctx, req.(*CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListDirectoryRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListDirectoryRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListDirectoryRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListDirectoryRows(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetDirectoryEntryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetDirectoryEntryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetDirectoryEntryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetDirectoryEntryID(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdminExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdminExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdminExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdminExist(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerexist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerexist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerexist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerexist(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_InvalidateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).InvalidateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/InvalidateCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).InvalidateCache(ctx, req.(*InvalidateCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkersVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkersVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkersVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkersVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkersVersion(ctx, req.(*GetWorkersVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJobsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetJobsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetJobsVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetJobsVersion(ctx, req.(*GetJobsVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJobVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetJobVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetJobVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetJobVersion(ctx, req.(*GetJobVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetCompanyVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyVersion(ctx, req.(*GetCompanyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetTeamsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetTeamsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetTeamsVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetTeamsVersion(ctx, req.(*GetTeamsVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetTeamVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetTeamVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetTeamVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetTeamVersion(ctx, req.(*GetTeamVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdminsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminsVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdminsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdminsVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdminsVersion(ctx, req.(*GetAdminsVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerTeamVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerTeamVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerTeamVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerTeamVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerTeamVersion(ctx, req.(*GetWorkerTeamVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyService_CreateCompany_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _CompanyService_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _CompanyService_CreateTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _CompanyService_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _CompanyService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _CompanyService_UpdateTeam_Handler,
		},
		{
			MethodName: "GetWorkerTeamInfo",
			Handler:    _CompanyService_GetWorkerTeamInfo_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _CompanyService_CreateJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _CompanyService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _CompanyService_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _CompanyService_UpdateJob_Handler,
		},
		{
			MethodName: "CreateShift",
			Handler:    _CompanyService_CreateShift_Handler,
		},
		{
			MethodName: "ListShifts",
			Handler:    _CompanyService_ListShifts_Handler,
		},
		{
			MethodName: "ListWorkerShifts",
			Handler:    _CompanyService_ListWorkerShifts_Handler,
		},
		{
			MethodName: "BulkPublishShifts",
			Handler:    _CompanyService_BulkPublishShifts_Handler,
		},
		{
			MethodName: "GetShift",
			Handler:    _CompanyService_GetShift_Handler,
		},
		{
			MethodName: "DeleteShift",
			Handler:    _CompanyService_DeleteShift_Handler,
		},
		{
			MethodName: "UpdateShift",
			Handler:    _CompanyService_UpdateShift_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _CompanyService_CreateDirectory_Handler,
		},
		{
			MethodName: "Directory",
			Handler:    _CompanyService_Directory_Handler,
		},
		{
			MethodName: "GetAssociations",
			Handler:    _CompanyService_GetAssociations_Handler,
		},
		{
			MethodName: "GetDirectoryEntry",
			Handler:    _CompanyService_GetDirectoryEntry_Handler,
		},
		{
			MethodName: "UpdateDirectoryEntry",
			Handler:    _CompanyService_UpdateDirectoryEntry_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _CompanyService_ListAdmins_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _CompanyService_CreateAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _CompanyService_GetAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _CompanyService_DeleteAdmin_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _CompanyService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _CompanyService_GetWorker_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _CompanyService_DeleteWorker_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _CompanyService_CreateWorker_Handler,
		},
		{
			MethodName: "ListTimeZones",
			Handler:    _CompanyService_ListTimeZones_Handler,
		},
		{
			MethodName: "GrowthGraph",
			Handler:    _CompanyService_GrowthGraph_Handler,
		},
		{
			MethodName: "GetWorkerOf",
			Handler:    _CompanyService_GetWorkerOf_Handler,
		},
		{
			MethodName: "GetAdminOf",
			Handler:    _CompanyService_GetAdminOf_Handler,
		},
		{
			MethodName: "ListCompanyRows",
			Handler:    _CompanyService_ListCompanyRows_Handler,
		},
		{
			MethodName: "ListDirectoryRows",
			Handler:    _CompanyService_ListDirectoryRows_Handler,
		},
		{
			MethodName: "GetDirectoryEntryID",
			Handler:    _CompanyService_GetDirectoryEntryID_Handler,
		},
		{
			MethodName: "GetAdminExist",
			Handler:    _CompanyService_GetAdminExist_Handler,
		},
		{
			MethodName: "GetWorkerexist",
			Handler:    _CompanyService_GetWorkerexist_Handler,
		},
		{
			MethodName: "InvalidateCache",
			Handler:    _CompanyService_InvalidateCache_Handler,
		},
		{
			MethodName: "GetWorkersVersion",
			Handler:    _CompanyService_GetWorkersVersion_Handler,
		},
		{
			MethodName: "GetJobsVersion",
			Handler:    _CompanyService_GetJobsVersion_Handler,
		},
		{
			MethodName: "GetJobVersion",
			Handler:    _CompanyService_GetJobVersion_Handler,
		},
		{
			MethodName: "GetCompanyVersion",
			Handler:    _CompanyService_GetCompanyVersion_Handler,
		},
		{
			MethodName: "GetTeamsVersion",
			Handler:    _CompanyService_GetTeamsVersion_Handler,
		},
		{
			MethodName: "GetTeamVersion",
			Handler:    _CompanyService_GetTeamVersion_Handler,
		},
		{
			MethodName: "GetAdminsVersion",
			Handler:    _CompanyService_GetAdminsVersion_Handler,
		},
		{
			MethodName: "GetWorkerTeamVersion",
			Handler:    _CompanyService_GetWorkerTeamVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

func (m *Company) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Company) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Company) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DefaultDayWeekStarts) > 0 {
		i -= len(m.DefaultDayWeekStarts)
		copy(dAtA[i:], m.DefaultDayWeekStarts)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultDayWeekStarts)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DefaultTimezone) > 0 {
		i -= len(m.DefaultTimezone)
		copy(dAtA[i:], m.DefaultTimezone)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultTimezone)))
		i--
		dAtA[i] = 0x22
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompanyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Companies) > 0 {
		for iNdEx := len(m.Companies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Companies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CompanyListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateCompanyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCompanyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCompanyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultDayWeekStarts) > 0 {
		i -= len(m.DefaultDayWeekStarts)
		copy(dAtA[i:], m.DefaultDayWeekStarts)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultDayWeekStarts)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DefaultTimezone) > 0 {
		i -= len(m.DefaultTimezone)
		copy(dAtA[i:], m.DefaultTimezone)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DefaultTimezone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCompanyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCompanyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RowsOfCompany) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowsOfCompany) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowsOfCompany) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		for iNdEx := len(m.CompanyUuid) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompanyUuid[iNdEx])
			copy(dAtA[i:], m.CompanyUuid[iNdEx])
			i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCompanyVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompanyVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCompanyVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompanyVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompanyVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompanyVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompanyVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.CompanyVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DayWeekStarts) > 0 {
		i -= len(m.DayWeekStarts)
		copy(dAtA[i:], m.DayWeekStarts)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DayWeekStarts)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Timezone) > 0 {
		i -= len(m.Timezone)
		copy(dAtA[i:], m.Timezone)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Timezone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DayWeekStarts) > 0 {
		i -= len(m.DayWeekStarts)
		copy(dAtA[i:], m.DayWeekStarts)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.DayWeekStarts)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Timezone) > 0 {
		i -= len(m.Timezone)
		copy(dAtA[i:], m.Timezone)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Timezone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.TeamVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTeamsVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeamsVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeamsVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamsVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamsVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamsVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamsVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.TeamsVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerTeamVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerTeamVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerTeamVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerTeamVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerTeamVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerTeamVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkerteamVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.WorkerteamVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x32
	}
	if m.Archived {
		i--
		if m.Archived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetJobVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JobVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.JobVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetJobsVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetJobsVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetJobsVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobsVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobsVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobsVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JobsVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.JobsVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Shift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Shift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Published {
		i--
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.JobUuid) > 0 {
		i -= len(m.JobUuid)
		copy(dAtA[i:], m.JobUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x32
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Stop, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCompany(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCompany(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShiftList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShiftList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShiftList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartBefore, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintCompany(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartAfter, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintCompany(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if len(m.Shifts) > 0 {
		for iNdEx := len(m.Shifts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shifts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShiftListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShiftListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShiftListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShiftStartBefore) > 0 {
		i -= len(m.ShiftStartBefore)
		copy(dAtA[i:], m.ShiftStartBefore)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.ShiftStartBefore)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ShiftStartAfter) > 0 {
		i -= len(m.ShiftStartAfter)
		copy(dAtA[i:], m.ShiftStartAfter)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.ShiftStartAfter)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.JobUuid) > 0 {
		i -= len(m.JobUuid)
		copy(dAtA[i:], m.JobUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerShiftListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerShiftListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerShiftListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartBefore, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintCompany(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartAfter, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintCompany(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	if len(m.WorkerUuid) > 0 {
		i -= len(m.WorkerUuid)
		copy(dAtA[i:], m.WorkerUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.WorkerUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BulkPublishShiftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkPublishShiftsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkPublishShiftsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Published {
		i--
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartBefore, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintCompany(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x32
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ShiftStartAfter, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintCompany(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x2a
	if len(m.JobUuid) > 0 {
		i -= len(m.JobUuid)
		copy(dAtA[i:], m.JobUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateShiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateShiftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateShiftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Published {
		i--
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.JobUuid) > 0 {
		i -= len(m.JobUuid)
		copy(dAtA[i:], m.JobUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.JobUuid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x32
	}
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Stop, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintCompany(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x2a
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintCompany(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x22
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetShiftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShiftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetShiftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhotoUrl) > 0 {
		i -= len(m.PhotoUrl)
		copy(dAtA[i:], m.PhotoUrl)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.PhotoUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Phonenumber) > 0 {
		i -= len(m.Phonenumber)
		copy(dAtA[i:], m.Phonenumber)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Phonenumber)))
		i--
		dAtA[i] = 0x42
	}
	if m.ConfirmedAndActive {
		i--
		if m.ConfirmedAndActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewDirectoryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewDirectoryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewDirectoryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phonenumber) > 0 {
		i -= len(m.Phonenumber)
		copy(dAtA[i:], m.Phonenumber)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Phonenumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RowsOfDirectory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowsOfDirectory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowsOfDirectory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DirectoryIds) > 0 {
		for iNdEx := len(m.DirectoryIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DirectoryIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryEntryID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryEntryID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryEntryID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternalId) > 0 {
		i -= len(m.InternalId)
		copy(dAtA[i:], m.InternalId)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.InternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Admins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Admins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminOfList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminOfList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminOfList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for iNdEx := len(m.Companies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Companies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminExist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminExist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminExist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAdminsVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdminsVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAdminsVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminsVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminsVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminsVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdminsVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.AdminsVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Workers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Workers) > 0 {
		for iNdEx := len(m.Workers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerOfList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerOfList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerOfList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerExist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerExist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerExist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkersVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkersVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkersVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkersVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkersVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkersVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkersVer != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.WorkersVer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Association) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Association) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Association) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Admin {
		i--
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCompany(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AssociationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssociationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssociationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TimeZoneList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeZoneList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeZoneList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timezones) > 0 {
		for iNdEx := len(m.Timezones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Timezones[iNdEx])
			copy(dAtA[i:], m.Timezones[iNdEx])
			i = encodeVarintCompany(dAtA, i, uint64(len(m.Timezones[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TimeZoneListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeZoneListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeZoneListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ScheduledPerWeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledPerWeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledPerWeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Week) > 0 {
		i -= len(m.Week)
		copy(dAtA[i:], m.Week)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Week)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GrowthGraphResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrowthGraphResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrowthGraphResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeopleOnShifts != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.PeopleOnShifts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PeopleScheduledPerWeek) > 0 {
		for k := range m.PeopleScheduledPerWeek {
			v := m.PeopleScheduledPerWeek[k]
			baseI := i
			i = encodeVarintCompany(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCompany(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCompany(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GrowthGraphRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrowthGraphRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrowthGraphRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InvalidateCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUuid) > 0 {
		i -= len(m.UserUuid)
		copy(dAtA[i:], m.UserUuid)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UserUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompany(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompany(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Company) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	l = len(m.DefaultTimezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DefaultDayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *CompanyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Companies) > 0 {
		for _, e := range m.Companies {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *CompanyListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	return n
}

func (m *CreateCompanyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DefaultTimezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DefaultDayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetCompanyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *RowsOfCompany) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		for _, s := range m.CompanyUuid {
			l = len(s)
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *GetCompanyVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *CompanyVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompanyVer != 0 {
		n += 1 + sovCompany(uint64(m.CompanyVer))
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *CreateTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.DayWeekStarts)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetTeamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *TeamList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *TeamListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetTeamVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *TeamVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamVer != 0 {
		n += 1 + sovCompany(uint64(m.TeamVer))
	}
	return n
}

func (m *GetTeamsVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *TeamsVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TeamsVer != 0 {
		n += 1 + sovCompany(uint64(m.TeamsVer))
	}
	return n
}

func (m *GetWorkerTeamVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkerTeamVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerteamVer != 0 {
		n += 1 + sovCompany(uint64(m.WorkerteamVer))
	}
	return n
}

func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Archived {
		n += 2
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *JobListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *CreateJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *GetJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *JobList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *GetJobVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *JobVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobVer != 0 {
		n += 1 + sovCompany(uint64(m.JobVer))
	}
	return n
}

func (m *GetJobsVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *JobsVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobsVer != 0 {
		n += 1 + sovCompany(uint64(m.JobsVer))
	}
	return n
}

func (m *Shift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop)
	n += 1 + l + sovCompany(uint64(l))
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Published {
		n += 2
	}
	return n
}

func (m *ShiftList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shifts) > 0 {
		for _, e := range m.Shifts {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)
	n += 1 + l + sovCompany(uint64(l))
	return n
}

func (m *ShiftListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.ShiftStartAfter)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.ShiftStartBefore)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkerShiftListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.WorkerUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)
	n += 1 + l + sovCompany(uint64(l))
	return n
}

func (m *BulkPublishShiftsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartAfter)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ShiftStartBefore)
	n += 1 + l + sovCompany(uint64(l))
	if m.Published {
		n += 2
	}
	return n
}

func (m *CreateShiftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovCompany(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Stop)
	n += 1 + l + sovCompany(uint64(l))
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Published {
		n += 2
	}
	return n
}

func (m *GetShiftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *DirectoryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.ConfirmedAndActive {
		n += 2
	}
	l = len(m.Phonenumber)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.PhotoUrl)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *NewDirectoryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Phonenumber)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *DirectoryEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *DirectoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *DirectoryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *DirectoryID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *RowsOfDirectory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DirectoryIds) > 0 {
		for _, e := range m.DirectoryIds {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *DirectoryEntryID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InternalId)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *AdminListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Admins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *AdminOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *AdminOfList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Companies) > 0 {
		for _, e := range m.Companies {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *AdminExist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *GetAdminsVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *AdminsVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminsVer != 0 {
		n += 1 + sovCompany(uint64(m.AdminsVer))
	}
	return n
}

func (m *WorkerListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *Workers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovCompany(uint64(m.Version))
	}
	return n
}

func (m *WorkerOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkerOfList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *WorkerExist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *GetWorkersVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func (m *WorkersVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkersVer != 0 {
		n += 1 + sovCompany(uint64(m.WorkersVer))
	}
	return n
}

func (m *Association) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Account.Size()
	n += 1 + l + sovCompany(uint64(l))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Admin {
		n += 2
	}
	return n
}

func (m *AssociationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCompany(uint64(m.Offset))
	}
	return n
}

func (m *TimeZoneList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Timezones) > 0 {
		for _, s := range m.Timezones {
			l = len(s)
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	return n
}

func (m *TimeZoneListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ScheduledPerWeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Week)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovCompany(uint64(m.Count))
	}
	return n
}

func (m *GrowthGraphResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeopleScheduledPerWeek) > 0 {
		for k, v := range m.PeopleScheduledPerWeek {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCompany(uint64(len(k))) + 1 + sovCompany(uint64(v))
			n += mapEntrySize + 1 + sovCompany(uint64(mapEntrySize))
		}
	}
	if m.PeopleOnShifts != 0 {
		n += 1 + sovCompany(uint64(m.PeopleOnShifts))
	}
	return n
}

func (m *GrowthGraphRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InvalidateCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserUuid)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	return n
}

func sovCompany(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompany(x uint64) (n int) {
	return sovCompany(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Company) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Company: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Company: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTimezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTimezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultDayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, Company{})
			if err := m.Companies[len(m.Companies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCompanyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCompanyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCompanyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTimezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultTimezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultDayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowsOfCompany) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowsOfCompany: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowsOfCompany: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = append(m.CompanyUuid, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompanyVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompanyVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompanyVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompanyVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompanyVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompanyVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyVer", wireType)
			}
			m.CompanyVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompanyVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayWeekStarts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayWeekStarts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamVer", wireType)
			}
			m.TeamVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeamsVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeamsVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeamsVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamsVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamsVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamsVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamsVer", wireType)
			}
			m.TeamsVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamsVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerTeamVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerTeamVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerTeamVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerTeamVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerTeamVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerTeamVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerteamVer", wireType)
			}
			m.WorkerteamVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerteamVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archived = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, Job{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobVer", wireType)
			}
			m.JobVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetJobsVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetJobsVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetJobsVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobsVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobsVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobsVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobsVer", wireType)
			}
			m.JobsVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobsVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Stop, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShiftList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShiftList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShiftList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shifts = append(m.Shifts, Shift{})
			if err := m.Shifts[len(m.Shifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShiftListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShiftListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShiftListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShiftStartAfter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShiftStartBefore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerShiftListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerShiftListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerShiftListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkPublishShiftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkPublishShiftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkPublishShiftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShiftStartBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ShiftStartBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateShiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateShiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateShiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Stop, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShiftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShiftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShiftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedAndActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfirmedAndActive = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phonenumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phonenumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewDirectoryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewDirectoryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewDirectoryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phonenumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phonenumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, DirectoryEntry{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowsOfDirectory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowsOfDirectory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowsOfDirectory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirectoryIds = append(m.DirectoryIds, DirectoryID{})
			if err := m.DirectoryIds[len(m.DirectoryIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryEntryID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryEntryID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryEntryID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Admins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, DirectoryEntry{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminOfList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminOfList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminOfList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Companies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Companies = append(m.Companies, Company{})
			if err := m.Companies[len(m.Companies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminExist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminExist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminExist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAdminsVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdminsVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdminsVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminsVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminsVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminsVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminsVer", wireType)
			}
			m.AdminsVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminsVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, DirectoryEntry{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerOfList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerOfList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerOfList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerExist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerExist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerExist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkersVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkersVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkersVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkersVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkersVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkersVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkersVer", wireType)
			}
			m.WorkersVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkersVer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Association) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Association: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Association: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssociationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssociationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssociationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, Association{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeZoneList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeZoneList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeZoneList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezones = append(m.Timezones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeZoneListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeZoneListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeZoneListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledPerWeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledPerWeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledPerWeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Week", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Week = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrowthGraphResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrowthGraphResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrowthGraphResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleScheduledPerWeek", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeopleScheduledPerWeek == nil {
				m.PeopleScheduledPerWeek = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCompany
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCompany
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCompany
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCompany
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCompany
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCompany(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCompany
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PeopleScheduledPerWeek[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleOnShifts", wireType)
			}
			m.PeopleOnShifts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeopleOnShifts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrowthGraphRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrowthGraphRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrowthGraphRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompany(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompany
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompany
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompany
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompany        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompany          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompany = fmt.Errorf("proto: unexpected end of group")
)
