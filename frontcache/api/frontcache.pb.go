// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: frontcache.proto

package main

import (
	context "context"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	account "v2.staffjoy.com/account"
	company "v2.staffjoy.com/company"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvalidateWorkersCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUuid string `protobuf:"bytes,1,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (x *InvalidateWorkersCacheRequest) Reset() {
	*x = InvalidateWorkersCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateWorkersCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateWorkersCacheRequest) ProtoMessage() {}

func (x *InvalidateWorkersCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateWorkersCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateWorkersCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{0}
}

func (x *InvalidateWorkersCacheRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

type InvalidateJobsCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUuid string `protobuf:"bytes,1,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (x *InvalidateJobsCacheRequest) Reset() {
	*x = InvalidateJobsCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateJobsCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateJobsCacheRequest) ProtoMessage() {}

func (x *InvalidateJobsCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateJobsCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateJobsCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{1}
}

func (x *InvalidateJobsCacheRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

type InvalidateJobCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobUuid string `protobuf:"bytes,1,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
}

func (x *InvalidateJobCacheRequest) Reset() {
	*x = InvalidateJobCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateJobCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateJobCacheRequest) ProtoMessage() {}

func (x *InvalidateJobCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateJobCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateJobCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{2}
}

func (x *InvalidateJobCacheRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

type InvalidateCompanyCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (x *InvalidateCompanyCacheRequest) Reset() {
	*x = InvalidateCompanyCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateCompanyCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateCompanyCacheRequest) ProtoMessage() {}

func (x *InvalidateCompanyCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateCompanyCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateCompanyCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{3}
}

func (x *InvalidateCompanyCacheRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

type InvalidateTeamsCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (x *InvalidateTeamsCacheRequest) Reset() {
	*x = InvalidateTeamsCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateTeamsCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTeamsCacheRequest) ProtoMessage() {}

func (x *InvalidateTeamsCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTeamsCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateTeamsCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{4}
}

func (x *InvalidateTeamsCacheRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

type InvalidateTeamCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamUuid string `protobuf:"bytes,1,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (x *InvalidateTeamCacheRequest) Reset() {
	*x = InvalidateTeamCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateTeamCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateTeamCacheRequest) ProtoMessage() {}

func (x *InvalidateTeamCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateTeamCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateTeamCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{5}
}

func (x *InvalidateTeamCacheRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

type InvalidateAdminsCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (x *InvalidateAdminsCacheRequest) Reset() {
	*x = InvalidateAdminsCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateAdminsCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateAdminsCacheRequest) ProtoMessage() {}

func (x *InvalidateAdminsCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateAdminsCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateAdminsCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{6}
}

func (x *InvalidateAdminsCacheRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

type InvalidateWorkerteamCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerUuid string `protobuf:"bytes,1,opt,name=worker_uuid,json=workerUuid,proto3" json:"worker_uuid,omitempty"`
}

func (x *InvalidateWorkerteamCacheRequest) Reset() {
	*x = InvalidateWorkerteamCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateWorkerteamCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateWorkerteamCacheRequest) ProtoMessage() {}

func (x *InvalidateWorkerteamCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateWorkerteamCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateWorkerteamCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{7}
}

func (x *InvalidateWorkerteamCacheRequest) GetWorkerUuid() string {
	if x != nil {
		return x.WorkerUuid
	}
	return ""
}

type InvalidateAccountCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountUuid string `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
}

func (x *InvalidateAccountCacheRequest) Reset() {
	*x = InvalidateAccountCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontcache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateAccountCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateAccountCacheRequest) ProtoMessage() {}

func (x *InvalidateAccountCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontcache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateAccountCacheRequest.ProtoReflect.Descriptor instead.
func (*InvalidateAccountCacheRequest) Descriptor() ([]byte, []int) {
	return file_frontcache_proto_rawDescGZIP(), []int{8}
}

func (x *InvalidateAccountCacheRequest) GetAccountUuid() string {
	if x != nil {
		return x.AccountUuid
	}
	return ""
}

var File_frontcache_proto protoreflect.FileDescriptor

var file_frontcache_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x40, 0x76, 0x31, 0x2e,
	0x33, 0x2e, 0x31, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x36, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1b, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0x39, 0x0a,
	0x1a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x20, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x74,
	0x65, 0x61, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x42, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x32, 0xb2, 0x17, 0x0a, 0x11, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x12, 0x76, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73,
	0x12, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x76, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a,
	0x6f, 0x62, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f,
	0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x8f, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x9a, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x37, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x20,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x66, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x32, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x13, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x2e, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x30, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f,
	0x79, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x35, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x32, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x1a, 0x76, 0x32, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0xe0, 0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0,
	0xe2, 0x1e, 0x01, 0xd8, 0xe3, 0x1e, 0x00, 0x90, 0xe3, 0x1e, 0x00, 0xd0, 0xe3, 0x1e, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontcache_proto_rawDescOnce sync.Once
	file_frontcache_proto_rawDescData = file_frontcache_proto_rawDesc
)

func file_frontcache_proto_rawDescGZIP() []byte {
	file_frontcache_proto_rawDescOnce.Do(func() {
		file_frontcache_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontcache_proto_rawDescData)
	})
	return file_frontcache_proto_rawDescData
}

var file_frontcache_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_frontcache_proto_goTypes = []interface{}{
	(*InvalidateWorkersCacheRequest)(nil),    // 0: staffjoy.frontcache.InvalidateWorkersCacheRequest
	(*InvalidateJobsCacheRequest)(nil),       // 1: staffjoy.frontcache.InvalidateJobsCacheRequest
	(*InvalidateJobCacheRequest)(nil),        // 2: staffjoy.frontcache.InvalidateJobCacheRequest
	(*InvalidateCompanyCacheRequest)(nil),    // 3: staffjoy.frontcache.InvalidateCompanyCacheRequest
	(*InvalidateTeamsCacheRequest)(nil),      // 4: staffjoy.frontcache.InvalidateTeamsCacheRequest
	(*InvalidateTeamCacheRequest)(nil),       // 5: staffjoy.frontcache.InvalidateTeamCacheRequest
	(*InvalidateAdminsCacheRequest)(nil),     // 6: staffjoy.frontcache.InvalidateAdminsCacheRequest
	(*InvalidateWorkerteamCacheRequest)(nil), // 7: staffjoy.frontcache.InvalidateWorkerteamCacheRequest
	(*InvalidateAccountCacheRequest)(nil),    // 8: staffjoy.frontcache.InvalidateAccountCacheRequest
	(*company.CompanyListRequest)(nil),       // 9: staffjoy.company.CompanyListRequest
	(*company.GetCompanyRequest)(nil),        // 10: staffjoy.company.GetCompanyRequest
	(*company.TeamListRequest)(nil),          // 11: staffjoy.company.TeamListRequest
	(*company.GetTeamRequest)(nil),           // 12: staffjoy.company.GetTeamRequest
	(*company.Worker)(nil),                   // 13: staffjoy.company.Worker
	(*company.JobListRequest)(nil),           // 14: staffjoy.company.JobListRequest
	(*company.GetJobRequest)(nil),            // 15: staffjoy.company.GetJobRequest
	(*company.DirectoryListRequest)(nil),     // 16: staffjoy.company.DirectoryListRequest
	(*company.DirectoryEntryRequest)(nil),    // 17: staffjoy.company.DirectoryEntryRequest
	(*company.AdminListRequest)(nil),         // 18: staffjoy.company.AdminListRequest
	(*company.WorkerListRequest)(nil),        // 19: staffjoy.company.WorkerListRequest
	(*account.GetAccountListRequest)(nil),    // 20: staffjoy.account.GetAccountListRequest
	(*account.GetAccountRequest)(nil),        // 21: staffjoy.account.GetAccountRequest
	(*company.CompanyList)(nil),              // 22: staffjoy.company.CompanyList
	(*company.Company)(nil),                  // 23: staffjoy.company.Company
	(*company.TeamList)(nil),                 // 24: staffjoy.company.TeamList
	(*company.Team)(nil),                     // 25: staffjoy.company.Team
	(*company.JobList)(nil),                  // 26: staffjoy.company.JobList
	(*company.Job)(nil),                      // 27: staffjoy.company.Job
	(*company.DirectoryList)(nil),            // 28: staffjoy.company.DirectoryList
	(*company.AssociationList)(nil),          // 29: staffjoy.company.AssociationList
	(*company.DirectoryEntry)(nil),           // 30: staffjoy.company.DirectoryEntry
	(*company.Admins)(nil),                   // 31: staffjoy.company.Admins
	(*company.Workers)(nil),                  // 32: staffjoy.company.Workers
	(*account.AccountList)(nil),              // 33: staffjoy.account.AccountList
	(*account.Account)(nil),                  // 34: staffjoy.account.Account
	(*emptypb.Empty)(nil),                    // 35: google.protobuf.Empty
}
var file_frontcache_proto_depIdxs = []int32{
	9,  // 0: staffjoy.frontcache.FrontCacheService.ListCompanies:input_type -> staffjoy.company.CompanyListRequest
	10, // 1: staffjoy.frontcache.FrontCacheService.GetCompany:input_type -> staffjoy.company.GetCompanyRequest
	11, // 2: staffjoy.frontcache.FrontCacheService.ListTeams:input_type -> staffjoy.company.TeamListRequest
	12, // 3: staffjoy.frontcache.FrontCacheService.GetTeam:input_type -> staffjoy.company.GetTeamRequest
	13, // 4: staffjoy.frontcache.FrontCacheService.GetWorkerTeamInfo:input_type -> staffjoy.company.Worker
	14, // 5: staffjoy.frontcache.FrontCacheService.ListJobs:input_type -> staffjoy.company.JobListRequest
	15, // 6: staffjoy.frontcache.FrontCacheService.GetJob:input_type -> staffjoy.company.GetJobRequest
	16, // 7: staffjoy.frontcache.FrontCacheService.Directory:input_type -> staffjoy.company.DirectoryListRequest
	16, // 8: staffjoy.frontcache.FrontCacheService.GetAssociations:input_type -> staffjoy.company.DirectoryListRequest
	17, // 9: staffjoy.frontcache.FrontCacheService.GetDirectoryEntry:input_type -> staffjoy.company.DirectoryEntryRequest
	18, // 10: staffjoy.frontcache.FrontCacheService.ListAdmins:input_type -> staffjoy.company.AdminListRequest
	17, // 11: staffjoy.frontcache.FrontCacheService.GetAdmin:input_type -> staffjoy.company.DirectoryEntryRequest
	19, // 12: staffjoy.frontcache.FrontCacheService.ListWorkers:input_type -> staffjoy.company.WorkerListRequest
	13, // 13: staffjoy.frontcache.FrontCacheService.GetWorker:input_type -> staffjoy.company.Worker
	20, // 14: staffjoy.frontcache.FrontCacheService.ListAccounts:input_type -> staffjoy.account.GetAccountListRequest
	21, // 15: staffjoy.frontcache.FrontCacheService.GetAccount:input_type -> staffjoy.account.GetAccountRequest
	0,  // 16: staffjoy.frontcache.FrontCacheService.InvalidateWorkersCache:input_type -> staffjoy.frontcache.InvalidateWorkersCacheRequest
	1,  // 17: staffjoy.frontcache.FrontCacheService.InvalidateJobsCache:input_type -> staffjoy.frontcache.InvalidateJobsCacheRequest
	2,  // 18: staffjoy.frontcache.FrontCacheService.InvalidateJobCache:input_type -> staffjoy.frontcache.InvalidateJobCacheRequest
	3,  // 19: staffjoy.frontcache.FrontCacheService.InvalidateCompanyCache:input_type -> staffjoy.frontcache.InvalidateCompanyCacheRequest
	4,  // 20: staffjoy.frontcache.FrontCacheService.InvalidateTeamsCache:input_type -> staffjoy.frontcache.InvalidateTeamsCacheRequest
	5,  // 21: staffjoy.frontcache.FrontCacheService.InvalidateTeamCache:input_type -> staffjoy.frontcache.InvalidateTeamCacheRequest
	6,  // 22: staffjoy.frontcache.FrontCacheService.InvalidateAdminsCache:input_type -> staffjoy.frontcache.InvalidateAdminsCacheRequest
	7,  // 23: staffjoy.frontcache.FrontCacheService.InvalidateWorkerteamCache:input_type -> staffjoy.frontcache.InvalidateWorkerteamCacheRequest
	8,  // 24: staffjoy.frontcache.FrontCacheService.InvalidateAccountCache:input_type -> staffjoy.frontcache.InvalidateAccountCacheRequest
	22, // 25: staffjoy.frontcache.FrontCacheService.ListCompanies:output_type -> staffjoy.company.CompanyList
	23, // 26: staffjoy.frontcache.FrontCacheService.GetCompany:output_type -> staffjoy.company.Company
	24, // 27: staffjoy.frontcache.FrontCacheService.ListTeams:output_type -> staffjoy.company.TeamList
	25, // 28: staffjoy.frontcache.FrontCacheService.GetTeam:output_type -> staffjoy.company.Team
	13, // 29: staffjoy.frontcache.FrontCacheService.GetWorkerTeamInfo:output_type -> staffjoy.company.Worker
	26, // 30: staffjoy.frontcache.FrontCacheService.ListJobs:output_type -> staffjoy.company.JobList
	27, // 31: staffjoy.frontcache.FrontCacheService.GetJob:output_type -> staffjoy.company.Job
	28, // 32: staffjoy.frontcache.FrontCacheService.Directory:output_type -> staffjoy.company.DirectoryList
	29, // 33: staffjoy.frontcache.FrontCacheService.GetAssociations:output_type -> staffjoy.company.AssociationList
	30, // 34: staffjoy.frontcache.FrontCacheService.GetDirectoryEntry:output_type -> staffjoy.company.DirectoryEntry
	31, // 35: staffjoy.frontcache.FrontCacheService.ListAdmins:output_type -> staffjoy.company.Admins
	30, // 36: staffjoy.frontcache.FrontCacheService.GetAdmin:output_type -> staffjoy.company.DirectoryEntry
	32, // 37: staffjoy.frontcache.FrontCacheService.ListWorkers:output_type -> staffjoy.company.Workers
	30, // 38: staffjoy.frontcache.FrontCacheService.GetWorker:output_type -> staffjoy.company.DirectoryEntry
	33, // 39: staffjoy.frontcache.FrontCacheService.ListAccounts:output_type -> staffjoy.account.AccountList
	34, // 40: staffjoy.frontcache.FrontCacheService.GetAccount:output_type -> staffjoy.account.Account
	35, // 41: staffjoy.frontcache.FrontCacheService.InvalidateWorkersCache:output_type -> google.protobuf.Empty
	35, // 42: staffjoy.frontcache.FrontCacheService.InvalidateJobsCache:output_type -> google.protobuf.Empty
	35, // 43: staffjoy.frontcache.FrontCacheService.InvalidateJobCache:output_type -> google.protobuf.Empty
	35, // 44: staffjoy.frontcache.FrontCacheService.InvalidateCompanyCache:output_type -> google.protobuf.Empty
	35, // 45: staffjoy.frontcache.FrontCacheService.InvalidateTeamsCache:output_type -> google.protobuf.Empty
	35, // 46: staffjoy.frontcache.FrontCacheService.InvalidateTeamCache:output_type -> google.protobuf.Empty
	35, // 47: staffjoy.frontcache.FrontCacheService.InvalidateAdminsCache:output_type -> google.protobuf.Empty
	35, // 48: staffjoy.frontcache.FrontCacheService.InvalidateWorkerteamCache:output_type -> google.protobuf.Empty
	35, // 49: staffjoy.frontcache.FrontCacheService.InvalidateAccountCache:output_type -> google.protobuf.Empty
	25, // [25:50] is the sub-list for method output_type
	0,  // [0:25] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_frontcache_proto_init() }
func file_frontcache_proto_init() {
	if File_frontcache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frontcache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateWorkersCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateJobsCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateJobCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateCompanyCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateTeamsCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateTeamCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateAdminsCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateWorkerteamCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontcache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateAccountCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontcache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frontcache_proto_goTypes,
		DependencyIndexes: file_frontcache_proto_depIdxs,
		MessageInfos:      file_frontcache_proto_msgTypes,
	}.Build()
	File_frontcache_proto = out.File
	file_frontcache_proto_rawDesc = nil
	file_frontcache_proto_goTypes = nil
	file_frontcache_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrontCacheServiceClient is the client API for FrontCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontCacheServiceClient interface {
	// companies
	ListCompanies(ctx context.Context, in *company.CompanyListRequest, opts ...grpc.CallOption) (*company.CompanyList, error)
	GetCompany(ctx context.Context, in *company.GetCompanyRequest, opts ...grpc.CallOption) (*company.Company, error)
	// teams
	ListTeams(ctx context.Context, in *company.TeamListRequest, opts ...grpc.CallOption) (*company.TeamList, error)
	GetTeam(ctx context.Context, in *company.GetTeamRequest, opts ...grpc.CallOption) (*company.Team, error)
	GetWorkerTeamInfo(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.Worker, error)
	// jobs
	ListJobs(ctx context.Context, in *company.JobListRequest, opts ...grpc.CallOption) (*company.JobList, error)
	GetJob(ctx context.Context, in *company.GetJobRequest, opts ...grpc.CallOption) (*company.Job, error)
	// Directory
	Directory(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.DirectoryList, error)
	GetAssociations(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.AssociationList, error)
	GetDirectoryEntry(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error)
	// Admins
	ListAdmins(ctx context.Context, in *company.AdminListRequest, opts ...grpc.CallOption) (*company.Admins, error)
	GetAdmin(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error)
	// Workers
	ListWorkers(ctx context.Context, in *company.WorkerListRequest, opts ...grpc.CallOption) (*company.Workers, error)
	GetWorker(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.DirectoryEntry, error)
	// Accounts
	ListAccounts(ctx context.Context, in *account.GetAccountListRequest, opts ...grpc.CallOption) (*account.AccountList, error)
	GetAccount(ctx context.Context, in *account.GetAccountRequest, opts ...grpc.CallOption) (*account.Account, error)
	InvalidateWorkersCache(ctx context.Context, in *InvalidateWorkersCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateJobsCache(ctx context.Context, in *InvalidateJobsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateJobCache(ctx context.Context, in *InvalidateJobCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateCompanyCache(ctx context.Context, in *InvalidateCompanyCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateTeamsCache(ctx context.Context, in *InvalidateTeamsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateTeamCache(ctx context.Context, in *InvalidateTeamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateAdminsCache(ctx context.Context, in *InvalidateAdminsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateWorkerteamCache(ctx context.Context, in *InvalidateWorkerteamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateAccountCache(ctx context.Context, in *InvalidateAccountCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type frontCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontCacheServiceClient(cc grpc.ClientConnInterface) FrontCacheServiceClient {
	return &frontCacheServiceClient{cc}
}

func (c *frontCacheServiceClient) ListCompanies(ctx context.Context, in *company.CompanyListRequest, opts ...grpc.CallOption) (*company.CompanyList, error) {
	out := new(company.CompanyList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetCompany(ctx context.Context, in *company.GetCompanyRequest, opts ...grpc.CallOption) (*company.Company, error) {
	out := new(company.Company)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListTeams(ctx context.Context, in *company.TeamListRequest, opts ...grpc.CallOption) (*company.TeamList, error) {
	out := new(company.TeamList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetTeam(ctx context.Context, in *company.GetTeamRequest, opts ...grpc.CallOption) (*company.Team, error) {
	out := new(company.Team)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetWorkerTeamInfo(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.Worker, error) {
	out := new(company.Worker)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetWorkerTeamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListJobs(ctx context.Context, in *company.JobListRequest, opts ...grpc.CallOption) (*company.JobList, error) {
	out := new(company.JobList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetJob(ctx context.Context, in *company.GetJobRequest, opts ...grpc.CallOption) (*company.Job, error) {
	out := new(company.Job)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) Directory(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.DirectoryList, error) {
	out := new(company.DirectoryList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/Directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetAssociations(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.AssociationList, error) {
	out := new(company.AssociationList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetDirectoryEntry(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error) {
	out := new(company.DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetDirectoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListAdmins(ctx context.Context, in *company.AdminListRequest, opts ...grpc.CallOption) (*company.Admins, error) {
	out := new(company.Admins)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetAdmin(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error) {
	out := new(company.DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListWorkers(ctx context.Context, in *company.WorkerListRequest, opts ...grpc.CallOption) (*company.Workers, error) {
	out := new(company.Workers)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetWorker(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.DirectoryEntry, error) {
	out := new(company.DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListAccounts(ctx context.Context, in *account.GetAccountListRequest, opts ...grpc.CallOption) (*account.AccountList, error) {
	out := new(account.AccountList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetAccount(ctx context.Context, in *account.GetAccountRequest, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateWorkersCache(ctx context.Context, in *InvalidateWorkersCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateWorkersCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateJobsCache(ctx context.Context, in *InvalidateJobsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateJobsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateJobCache(ctx context.Context, in *InvalidateJobCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateJobCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateCompanyCache(ctx context.Context, in *InvalidateCompanyCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateCompanyCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateTeamsCache(ctx context.Context, in *InvalidateTeamsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateTeamsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateTeamCache(ctx context.Context, in *InvalidateTeamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateTeamCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateAdminsCache(ctx context.Context, in *InvalidateAdminsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateAdminsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateWorkerteamCache(ctx context.Context, in *InvalidateWorkerteamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateWorkerteamCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateAccountCache(ctx context.Context, in *InvalidateAccountCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateAccountCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontCacheServiceServer is the server API for FrontCacheService service.
type FrontCacheServiceServer interface {
	// companies
	ListCompanies(context.Context, *company.CompanyListRequest) (*company.CompanyList, error)
	GetCompany(context.Context, *company.GetCompanyRequest) (*company.Company, error)
	// teams
	ListTeams(context.Context, *company.TeamListRequest) (*company.TeamList, error)
	GetTeam(context.Context, *company.GetTeamRequest) (*company.Team, error)
	GetWorkerTeamInfo(context.Context, *company.Worker) (*company.Worker, error)
	// jobs
	ListJobs(context.Context, *company.JobListRequest) (*company.JobList, error)
	GetJob(context.Context, *company.GetJobRequest) (*company.Job, error)
	// Directory
	Directory(context.Context, *company.DirectoryListRequest) (*company.DirectoryList, error)
	GetAssociations(context.Context, *company.DirectoryListRequest) (*company.AssociationList, error)
	GetDirectoryEntry(context.Context, *company.DirectoryEntryRequest) (*company.DirectoryEntry, error)
	// Admins
	ListAdmins(context.Context, *company.AdminListRequest) (*company.Admins, error)
	GetAdmin(context.Context, *company.DirectoryEntryRequest) (*company.DirectoryEntry, error)
	// Workers
	ListWorkers(context.Context, *company.WorkerListRequest) (*company.Workers, error)
	GetWorker(context.Context, *company.Worker) (*company.DirectoryEntry, error)
	// Accounts
	ListAccounts(context.Context, *account.GetAccountListRequest) (*account.AccountList, error)
	GetAccount(context.Context, *account.GetAccountRequest) (*account.Account, error)
	InvalidateWorkersCache(context.Context, *InvalidateWorkersCacheRequest) (*emptypb.Empty, error)
	InvalidateJobsCache(context.Context, *InvalidateJobsCacheRequest) (*emptypb.Empty, error)
	InvalidateJobCache(context.Context, *InvalidateJobCacheRequest) (*emptypb.Empty, error)
	InvalidateCompanyCache(context.Context, *InvalidateCompanyCacheRequest) (*emptypb.Empty, error)
	InvalidateTeamsCache(context.Context, *InvalidateTeamsCacheRequest) (*emptypb.Empty, error)
	InvalidateTeamCache(context.Context, *InvalidateTeamCacheRequest) (*emptypb.Empty, error)
	InvalidateAdminsCache(context.Context, *InvalidateAdminsCacheRequest) (*emptypb.Empty, error)
	InvalidateWorkerteamCache(context.Context, *InvalidateWorkerteamCacheRequest) (*emptypb.Empty, error)
	InvalidateAccountCache(context.Context, *InvalidateAccountCacheRequest) (*emptypb.Empty, error)
}

// UnimplementedFrontCacheServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFrontCacheServiceServer struct {
}

func (*UnimplementedFrontCacheServiceServer) ListCompanies(context.Context, *company.CompanyListRequest) (*company.CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetCompany(context.Context, *company.GetCompanyRequest) (*company.Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListTeams(context.Context, *company.TeamListRequest) (*company.TeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetTeam(context.Context, *company.GetTeamRequest) (*company.Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetWorkerTeamInfo(context.Context, *company.Worker) (*company.Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerTeamInfo not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListJobs(context.Context, *company.JobListRequest) (*company.JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetJob(context.Context, *company.GetJobRequest) (*company.Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedFrontCacheServiceServer) Directory(context.Context, *company.DirectoryListRequest) (*company.DirectoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Directory not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetAssociations(context.Context, *company.DirectoryListRequest) (*company.AssociationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociations not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetDirectoryEntry(context.Context, *company.DirectoryEntryRequest) (*company.DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryEntry not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListAdmins(context.Context, *company.AdminListRequest) (*company.Admins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmins not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetAdmin(context.Context, *company.DirectoryEntryRequest) (*company.DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListWorkers(context.Context, *company.WorkerListRequest) (*company.Workers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetWorker(context.Context, *company.Worker) (*company.DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListAccounts(context.Context, *account.GetAccountListRequest) (*account.AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetAccount(context.Context, *account.GetAccountRequest) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateWorkersCache(context.Context, *InvalidateWorkersCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateWorkersCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateJobsCache(context.Context, *InvalidateJobsCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateJobsCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateJobCache(context.Context, *InvalidateJobCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateJobCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateCompanyCache(context.Context, *InvalidateCompanyCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCompanyCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateTeamsCache(context.Context, *InvalidateTeamsCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateTeamsCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateTeamCache(context.Context, *InvalidateTeamCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateTeamCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateAdminsCache(context.Context, *InvalidateAdminsCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAdminsCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateWorkerteamCache(context.Context, *InvalidateWorkerteamCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateWorkerteamCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateAccountCache(context.Context, *InvalidateAccountCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAccountCache not implemented")
}

func RegisterFrontCacheServiceServer(s *grpc.Server, srv FrontCacheServiceServer) {
	s.RegisterService(&_FrontCacheService_serviceDesc, srv)
}

func _FrontCacheService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListCompanies(ctx, req.(*company.CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetCompany(ctx, req.(*company.GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.TeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListTeams(ctx, req.(*company.TeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetTeam(ctx, req.(*company.GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetWorkerTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetWorkerTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetWorkerTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetWorkerTeamInfo(ctx, req.(*company.Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListJobs(ctx, req.(*company.JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetJob(ctx, req.(*company.GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).Directory(ctx, req.(*company.DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetAssociations(ctx, req.(*company.DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetDirectoryEntry(ctx, req.(*company.DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListAdmins(ctx, req.(*company.AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetAdmin(ctx, req.(*company.DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.WorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListWorkers(ctx, req.(*company.WorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetWorker(ctx, req.(*company.Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GetAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListAccounts(ctx, req.(*account.GetAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetAccount(ctx, req.(*account.GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateWorkersCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateWorkersCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateWorkersCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateWorkersCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateWorkersCache(ctx, req.(*InvalidateWorkersCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateJobsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateJobsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateJobsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateJobsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateJobsCache(ctx, req.(*InvalidateJobsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateJobCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateJobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateJobCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateJobCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateJobCache(ctx, req.(*InvalidateJobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateCompanyCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateCompanyCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateCompanyCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateCompanyCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateCompanyCache(ctx, req.(*InvalidateCompanyCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateTeamsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTeamsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateTeamsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateTeamsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateTeamsCache(ctx, req.(*InvalidateTeamsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateTeamCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTeamCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateTeamCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateTeamCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateTeamCache(ctx, req.(*InvalidateTeamCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateAdminsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAdminsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateAdminsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateAdminsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateAdminsCache(ctx, req.(*InvalidateAdminsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateWorkerteamCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateWorkerteamCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateWorkerteamCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateWorkerteamCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateWorkerteamCache(ctx, req.(*InvalidateWorkerteamCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateAccountCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAccountCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateAccountCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateAccountCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateAccountCache(ctx, req.(*InvalidateAccountCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontCacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.frontcache.FrontCacheService",
	HandlerType: (*FrontCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCompanies",
			Handler:    _FrontCacheService_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _FrontCacheService_GetCompany_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _FrontCacheService_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _FrontCacheService_GetTeam_Handler,
		},
		{
			MethodName: "GetWorkerTeamInfo",
			Handler:    _FrontCacheService_GetWorkerTeamInfo_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _FrontCacheService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _FrontCacheService_GetJob_Handler,
		},
		{
			MethodName: "Directory",
			Handler:    _FrontCacheService_Directory_Handler,
		},
		{
			MethodName: "GetAssociations",
			Handler:    _FrontCacheService_GetAssociations_Handler,
		},
		{
			MethodName: "GetDirectoryEntry",
			Handler:    _FrontCacheService_GetDirectoryEntry_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _FrontCacheService_ListAdmins_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _FrontCacheService_GetAdmin_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _FrontCacheService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _FrontCacheService_GetWorker_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _FrontCacheService_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _FrontCacheService_GetAccount_Handler,
		},
		{
			MethodName: "InvalidateWorkersCache",
			Handler:    _FrontCacheService_InvalidateWorkersCache_Handler,
		},
		{
			MethodName: "InvalidateJobsCache",
			Handler:    _FrontCacheService_InvalidateJobsCache_Handler,
		},
		{
			MethodName: "InvalidateJobCache",
			Handler:    _FrontCacheService_InvalidateJobCache_Handler,
		},
		{
			MethodName: "InvalidateCompanyCache",
			Handler:    _FrontCacheService_InvalidateCompanyCache_Handler,
		},
		{
			MethodName: "InvalidateTeamsCache",
			Handler:    _FrontCacheService_InvalidateTeamsCache_Handler,
		},
		{
			MethodName: "InvalidateTeamCache",
			Handler:    _FrontCacheService_InvalidateTeamCache_Handler,
		},
		{
			MethodName: "InvalidateAdminsCache",
			Handler:    _FrontCacheService_InvalidateAdminsCache_Handler,
		},
		{
			MethodName: "InvalidateWorkerteamCache",
			Handler:    _FrontCacheService_InvalidateWorkerteamCache_Handler,
		},
		{
			MethodName: "InvalidateAccountCache",
			Handler:    _FrontCacheService_InvalidateAccountCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontcache.proto",
}
