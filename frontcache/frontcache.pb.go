// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frontcache.proto

package frontcache

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	account "v2.staffjoy.com/account"
	company "v2.staffjoy.com/company"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InvalidateWorkersCacheRequest struct {
	TeamUuid string `protobuf:"bytes,1,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *InvalidateWorkersCacheRequest) Reset()         { *m = InvalidateWorkersCacheRequest{} }
func (m *InvalidateWorkersCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateWorkersCacheRequest) ProtoMessage()    {}
func (*InvalidateWorkersCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{0}
}
func (m *InvalidateWorkersCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateWorkersCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateWorkersCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateWorkersCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateWorkersCacheRequest.Merge(m, src)
}
func (m *InvalidateWorkersCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateWorkersCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateWorkersCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateWorkersCacheRequest proto.InternalMessageInfo

func (m *InvalidateWorkersCacheRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type InvalidateJobsCacheRequest struct {
	TeamUuid string `protobuf:"bytes,1,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *InvalidateJobsCacheRequest) Reset()         { *m = InvalidateJobsCacheRequest{} }
func (m *InvalidateJobsCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateJobsCacheRequest) ProtoMessage()    {}
func (*InvalidateJobsCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{1}
}
func (m *InvalidateJobsCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateJobsCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateJobsCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateJobsCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateJobsCacheRequest.Merge(m, src)
}
func (m *InvalidateJobsCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateJobsCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateJobsCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateJobsCacheRequest proto.InternalMessageInfo

func (m *InvalidateJobsCacheRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type InvalidateJobCacheRequest struct {
	JobUuid string `protobuf:"bytes,1,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
}

func (m *InvalidateJobCacheRequest) Reset()         { *m = InvalidateJobCacheRequest{} }
func (m *InvalidateJobCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateJobCacheRequest) ProtoMessage()    {}
func (*InvalidateJobCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{2}
}
func (m *InvalidateJobCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateJobCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateJobCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateJobCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateJobCacheRequest.Merge(m, src)
}
func (m *InvalidateJobCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateJobCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateJobCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateJobCacheRequest proto.InternalMessageInfo

func (m *InvalidateJobCacheRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

type InvalidateCompanyCacheRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *InvalidateCompanyCacheRequest) Reset()         { *m = InvalidateCompanyCacheRequest{} }
func (m *InvalidateCompanyCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateCompanyCacheRequest) ProtoMessage()    {}
func (*InvalidateCompanyCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{3}
}
func (m *InvalidateCompanyCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateCompanyCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateCompanyCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateCompanyCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateCompanyCacheRequest.Merge(m, src)
}
func (m *InvalidateCompanyCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateCompanyCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateCompanyCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateCompanyCacheRequest proto.InternalMessageInfo

func (m *InvalidateCompanyCacheRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type InvalidateTeamsCacheRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *InvalidateTeamsCacheRequest) Reset()         { *m = InvalidateTeamsCacheRequest{} }
func (m *InvalidateTeamsCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateTeamsCacheRequest) ProtoMessage()    {}
func (*InvalidateTeamsCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{4}
}
func (m *InvalidateTeamsCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateTeamsCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateTeamsCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateTeamsCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateTeamsCacheRequest.Merge(m, src)
}
func (m *InvalidateTeamsCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateTeamsCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateTeamsCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateTeamsCacheRequest proto.InternalMessageInfo

func (m *InvalidateTeamsCacheRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type InvalidateTeamCacheRequest struct {
	TeamUuid string `protobuf:"bytes,1,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (m *InvalidateTeamCacheRequest) Reset()         { *m = InvalidateTeamCacheRequest{} }
func (m *InvalidateTeamCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateTeamCacheRequest) ProtoMessage()    {}
func (*InvalidateTeamCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{5}
}
func (m *InvalidateTeamCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateTeamCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateTeamCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateTeamCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateTeamCacheRequest.Merge(m, src)
}
func (m *InvalidateTeamCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateTeamCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateTeamCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateTeamCacheRequest proto.InternalMessageInfo

func (m *InvalidateTeamCacheRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type InvalidateAdminsCacheRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (m *InvalidateAdminsCacheRequest) Reset()         { *m = InvalidateAdminsCacheRequest{} }
func (m *InvalidateAdminsCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateAdminsCacheRequest) ProtoMessage()    {}
func (*InvalidateAdminsCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{6}
}
func (m *InvalidateAdminsCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateAdminsCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateAdminsCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateAdminsCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateAdminsCacheRequest.Merge(m, src)
}
func (m *InvalidateAdminsCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateAdminsCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateAdminsCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateAdminsCacheRequest proto.InternalMessageInfo

func (m *InvalidateAdminsCacheRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type InvalidateWorkerteamCacheRequest struct {
	WorkerUuid string `protobuf:"bytes,1,opt,name=worker_uuid,json=workerUuid,proto3" json:"worker_uuid,omitempty"`
}

func (m *InvalidateWorkerteamCacheRequest) Reset()         { *m = InvalidateWorkerteamCacheRequest{} }
func (m *InvalidateWorkerteamCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateWorkerteamCacheRequest) ProtoMessage()    {}
func (*InvalidateWorkerteamCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{7}
}
func (m *InvalidateWorkerteamCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateWorkerteamCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateWorkerteamCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateWorkerteamCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateWorkerteamCacheRequest.Merge(m, src)
}
func (m *InvalidateWorkerteamCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateWorkerteamCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateWorkerteamCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateWorkerteamCacheRequest proto.InternalMessageInfo

func (m *InvalidateWorkerteamCacheRequest) GetWorkerUuid() string {
	if m != nil {
		return m.WorkerUuid
	}
	return ""
}

type InvalidateAccountCacheRequest struct {
	AccountUuid string `protobuf:"bytes,1,opt,name=account_uuid,json=accountUuid,proto3" json:"account_uuid,omitempty"`
}

func (m *InvalidateAccountCacheRequest) Reset()         { *m = InvalidateAccountCacheRequest{} }
func (m *InvalidateAccountCacheRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateAccountCacheRequest) ProtoMessage()    {}
func (*InvalidateAccountCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_281fce977f97c558, []int{8}
}
func (m *InvalidateAccountCacheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidateAccountCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidateAccountCacheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidateAccountCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidateAccountCacheRequest.Merge(m, src)
}
func (m *InvalidateAccountCacheRequest) XXX_Size() int {
	return m.Size()
}
func (m *InvalidateAccountCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidateAccountCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidateAccountCacheRequest proto.InternalMessageInfo

func (m *InvalidateAccountCacheRequest) GetAccountUuid() string {
	if m != nil {
		return m.AccountUuid
	}
	return ""
}

func init() {
	proto.RegisterType((*InvalidateWorkersCacheRequest)(nil), "staffjoy.frontcache.InvalidateWorkersCacheRequest")
	proto.RegisterType((*InvalidateJobsCacheRequest)(nil), "staffjoy.frontcache.InvalidateJobsCacheRequest")
	proto.RegisterType((*InvalidateJobCacheRequest)(nil), "staffjoy.frontcache.InvalidateJobCacheRequest")
	proto.RegisterType((*InvalidateCompanyCacheRequest)(nil), "staffjoy.frontcache.InvalidateCompanyCacheRequest")
	proto.RegisterType((*InvalidateTeamsCacheRequest)(nil), "staffjoy.frontcache.InvalidateTeamsCacheRequest")
	proto.RegisterType((*InvalidateTeamCacheRequest)(nil), "staffjoy.frontcache.InvalidateTeamCacheRequest")
	proto.RegisterType((*InvalidateAdminsCacheRequest)(nil), "staffjoy.frontcache.InvalidateAdminsCacheRequest")
	proto.RegisterType((*InvalidateWorkerteamCacheRequest)(nil), "staffjoy.frontcache.InvalidateWorkerteamCacheRequest")
	proto.RegisterType((*InvalidateAccountCacheRequest)(nil), "staffjoy.frontcache.InvalidateAccountCacheRequest")
}

func init() { proto.RegisterFile("frontcache.proto", fileDescriptor_281fce977f97c558) }

var fileDescriptor_281fce977f97c558 = []byte{
	// 1012 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0x72, 0x68, 0xe3, 0x37, 0x09, 0xa5, 0x6f, 0x3e, 0x48, 0x9c, 0xd4, 0x49, 0xa7, 0xa5,
	0x14, 0x2a, 0xed, 0xe2, 0x24, 0x2d, 0x50, 0x2a, 0xd4, 0x24, 0x2d, 0x56, 0x23, 0x4e, 0x05, 0x84,
	0xc4, 0x01, 0xd8, 0x5d, 0x8f, 0xdd, 0x75, 0xe3, 0x9d, 0xe0, 0x1d, 0x3b, 0xb2, 0x50, 0x2e, 0x28,
	0x57, 0x3e, 0xa4, 0xde, 0xf8, 0x19, 0xfc, 0x0a, 0x8e, 0x95, 0xb8, 0x70, 0x44, 0x09, 0x3f, 0x04,
	0xcd, 0xec, 0x87, 0x67, 0xbd, 0xe3, 0xdd, 0x75, 0xc4, 0xcd, 0x3b, 0xef, 0xc7, 0xf3, 0xbc, 0x1f,
	0x3b, 0xfb, 0x18, 0xde, 0x6a, 0xf5, 0x98, 0xcf, 0x5d, 0xdb, 0x7d, 0x41, 0xcd, 0xe3, 0x1e, 0xe3,
	0x0c, 0x17, 0x03, 0x6e, 0xb7, 0x5a, 0x1d, 0x36, 0x34, 0x47, 0xa6, 0xea, 0x46, 0x9b, 0xb1, 0xf6,
	0x11, 0xb5, 0xec, 0x63, 0xcf, 0xb2, 0x7d, 0x9f, 0x71, 0x9b, 0x7b, 0xcc, 0x0f, 0xc2, 0x90, 0xea,
	0x7a, 0x64, 0x95, 0x4f, 0x4e, 0xbf, 0x65, 0xd1, 0xee, 0x31, 0x1f, 0x46, 0xc6, 0xdd, 0xb6, 0xc7,
	0x5f, 0xf4, 0x1d, 0xd3, 0x65, 0x5d, 0xab, 0xcd, 0xda, 0x2c, 0xf1, 0x7a, 0x3c, 0xa8, 0x9b, 0x3b,
	0x66, 0x5d, 0x1e, 0xca, 0x33, 0xf9, 0x2b, 0x8a, 0x5a, 0xb0, 0x5d, 0x97, 0xf5, 0x7d, 0x1e, 0x3f,
	0xba, 0xac, 0x7b, 0x6c, 0xfb, 0x51, 0x4e, 0xf2, 0x08, 0x6e, 0x3c, 0xf3, 0x07, 0xf6, 0x91, 0xd7,
	0xb4, 0x39, 0xfd, 0x9a, 0xf5, 0x5e, 0xd2, 0x5e, 0x70, 0x20, 0x88, 0x3e, 0xa7, 0x3f, 0xf4, 0x69,
	0xc0, 0x71, 0x1d, 0x2a, 0x9c, 0xda, 0xdd, 0xef, 0xfa, 0x7d, 0xaf, 0xb9, 0x6a, 0x6c, 0x19, 0x77,
	0x2b, 0xcf, 0x67, 0xc5, 0xc1, 0x57, 0x7d, 0xaf, 0x49, 0x3e, 0x86, 0xea, 0x28, 0xfa, 0x90, 0x39,
	0x53, 0x84, 0x3e, 0x80, 0xb5, 0x54, 0x68, 0x2a, 0x72, 0x0d, 0x66, 0x3b, 0xcc, 0x51, 0x03, 0xaf,
	0x76, 0x98, 0x23, 0xe3, 0xf6, 0x55, 0xc2, 0x07, 0x61, 0x2d, 0xa9, 0xd8, 0x9b, 0x30, 0x1f, 0x95,
	0xa8, 0xc6, 0xcf, 0x45, 0x67, 0x32, 0xc7, 0x63, 0x58, 0x1f, 0xe5, 0xf8, 0x92, 0xda, 0xdd, 0x60,
	0xda, 0x0c, 0xa9, 0xc2, 0x45, 0x86, 0xf2, 0x85, 0xef, 0xc1, 0xc6, 0x28, 0x74, 0xaf, 0xd9, 0xf5,
	0xfc, 0xa9, 0xd1, 0x0f, 0x60, 0x6b, 0x7c, 0x68, 0x7c, 0x9c, 0xc3, 0x26, 0xcc, 0x9d, 0x48, 0x8b,
	0x9a, 0x05, 0xc2, 0xa3, 0x6c, 0x23, 0xf7, 0xc2, 0x1d, 0x19, 0x27, 0x12, 0xad, 0x4e, 0x8a, 0x48,
	0x74, 0x26, 0x72, 0x6c, 0xff, 0xf1, 0x36, 0x5c, 0xff, 0x4c, 0xec, 0xb6, 0x0c, 0xfc, 0x82, 0xf6,
	0x06, 0x9e, 0x4b, 0xf1, 0x25, 0x2c, 0x7c, 0xee, 0x05, 0x3c, 0x1c, 0x8e, 0x47, 0x03, 0xbc, 0x6d,
	0x26, 0x6f, 0x42, 0xbc, 0x7d, 0xd1, 0xe4, 0x84, 0x5f, 0x84, 0x57, 0xbd, 0x91, 0xeb, 0x45, 0x96,
	0x7f, 0xfa, 0xeb, 0xdf, 0x57, 0x6f, 0x5c, 0xc3, 0x05, 0x6b, 0x50, 0xb7, 0xdc, 0x24, 0x77, 0x07,
	0xa0, 0x41, 0x23, 0xac, 0x21, 0xde, 0xca, 0xe6, 0x18, 0x59, 0x63, 0xa0, 0xb5, 0x89, 0x40, 0x64,
	0x43, 0x82, 0xac, 0xe0, 0x52, 0x0a, 0xc4, 0xfa, 0x51, 0x34, 0xe0, 0x14, 0x07, 0x50, 0x11, 0x54,
	0xe4, 0xc6, 0xe0, 0xcd, 0x6c, 0x16, 0x61, 0x50, 0x2b, 0xaa, 0x4e, 0x76, 0x21, 0xef, 0x4b, 0xa4,
	0xdb, 0x48, 0xc6, 0x90, 0xd4, 0xd9, 0x9f, 0x5a, 0x5c, 0x42, 0x0d, 0xe0, 0x6a, 0x83, 0x4a, 0x58,
	0xdc, 0xd2, 0x16, 0x28, 0x4c, 0x31, 0xe8, 0x8a, 0x1e, 0x94, 0xd4, 0x25, 0xe0, 0x3d, 0x7c, 0xaf,
	0x18, 0x30, 0xae, 0x37, 0x80, 0xeb, 0x0d, 0xca, 0xc3, 0x05, 0x13, 0x39, 0x9e, 0xf9, 0x2d, 0x86,
	0xab, 0xd9, 0xfc, 0xa1, 0x47, 0x75, 0xa2, 0x65, 0x62, 0xb1, 0xfd, 0x20, 0xda, 0xcf, 0x10, 0xd8,
	0x13, 0xf9, 0xcf, 0x0c, 0x98, 0x15, 0x1d, 0x12, 0xd7, 0x89, 0xae, 0xdc, 0x43, 0xe6, 0xa8, 0x3d,
	0x5e, 0x9b, 0xe8, 0x41, 0x3e, 0x91, 0xa8, 0xf7, 0x71, 0xa7, 0x4c, 0xc5, 0xc9, 0x0b, 0x7b, 0x6a,
	0x75, 0x04, 0xf2, 0x99, 0x01, 0x57, 0x1a, 0x54, 0xb0, 0xc0, 0x4d, 0x6d, 0xcf, 0x0f, 0x99, 0x13,
	0x73, 0x58, 0xd6, 0x72, 0x20, 0xfb, 0x12, 0xff, 0x11, 0x3e, 0xbc, 0x04, 0x7e, 0x3c, 0x82, 0x33,
	0x03, 0x2a, 0x4f, 0xbc, 0x1e, 0x75, 0x39, 0xeb, 0x0d, 0xf1, 0x4e, 0x16, 0x28, 0x31, 0xaa, 0x4d,
	0xd9, 0x2c, 0xf0, 0x23, 0xa6, 0xa4, 0x76, 0x17, 0xef, 0xe4, 0x52, 0x6b, 0x26, 0xc0, 0xbf, 0x1a,
	0x70, 0xad, 0x41, 0xf9, 0x5e, 0x10, 0x30, 0xd7, 0x0b, 0xbf, 0x58, 0xa5, 0xc9, 0x68, 0x5e, 0x14,
	0x25, 0x8f, 0xa4, 0x53, 0x6e, 0x37, 0x6d, 0x15, 0xfd, 0x77, 0x43, 0x2e, 0x67, 0x82, 0xf8, 0xd4,
	0xe7, 0xbd, 0x21, 0xbe, 0x9b, 0xc3, 0x49, 0x7a, 0xc4, 0xa4, 0xb6, 0x8a, 0x1c, 0xc9, 0x43, 0xc9,
	0x69, 0x17, 0xb7, 0xcb, 0xb5, 0x48, 0x5d, 0x66, 0x3c, 0x01, 0x10, 0x75, 0x85, 0xb7, 0x3b, 0x12,
	0x4d, 0x03, 0x84, 0x45, 0x6d, 0xd2, 0xea, 0x04, 0x9f, 0x80, 0xdc, 0x93, 0x3c, 0xde, 0xc1, 0x5b,
	0xf9, 0xbd, 0x09, 0xa1, 0x7e, 0x31, 0x60, 0x56, 0xcc, 0x49, 0x3c, 0xfd, 0x9f, 0xcd, 0xf8, 0x50,
	0x92, 0xa8, 0xa3, 0x55, 0x82, 0x44, 0xaa, 0x13, 0x3f, 0x1b, 0x30, 0x27, 0xea, 0x8c, 0xa4, 0x85,
	0xee, 0x82, 0x0e, 0x4d, 0x05, 0xef, 0x74, 0x14, 0x4f, 0x3e, 0x95, 0x44, 0x3e, 0xc2, 0x07, 0x53,
	0xbe, 0x53, 0x27, 0x11, 0xfe, 0x2b, 0x03, 0x2a, 0xc9, 0x9d, 0x96, 0x73, 0x97, 0x15, 0xb7, 0xe4,
	0x50, 0x32, 0x79, 0x82, 0xfb, 0x97, 0x63, 0x92, 0xea, 0xd2, 0x11, 0xcc, 0xcb, 0x7d, 0x09, 0x3f,
	0xad, 0x81, 0x3a, 0xb9, 0x58, 0xbd, 0x89, 0xa9, 0x86, 0x3f, 0x27, 0x7c, 0x33, 0x63, 0x47, 0xc5,
	0x8b, 0x2c, 0x49, 0x8e, 0x6f, 0xe2, 0xbc, 0xe0, 0x68, 0xc7, 0xd9, 0x3d, 0xf9, 0xc9, 0x8c, 0xfc,
	0xd4, 0x89, 0x64, 0xb1, 0x34, 0x13, 0x19, 0xc3, 0x21, 0xeb, 0x12, 0x63, 0x19, 0x17, 0x55, 0x8c,
	0xf8, 0xfa, 0x6a, 0xc1, 0x8a, 0x5e, 0x5e, 0xe2, 0xb6, 0xa9, 0x51, 0xc7, 0x66, 0xae, 0x16, 0xad,
	0xae, 0x98, 0xa1, 0x3c, 0x36, 0x63, 0xe1, 0x6b, 0x3e, 0x15, 0xf2, 0x98, 0xcc, 0xe0, 0xf7, 0xb0,
	0xa8, 0x11, 0xa2, 0x68, 0x15, 0x80, 0x8c, 0x4b, 0xd6, 0x1c, 0x84, 0x6f, 0x01, 0xb3, 0x7a, 0x15,
	0xcd, 0x62, 0x80, 0x92, 0xf9, 0x53, 0x9d, 0x52, 0x75, 0x6d, 0x61, 0xa7, 0x34, 0x22, 0x38, 0x07,
	0xc7, 0x81, 0x25, 0x9d, 0xf6, 0xc5, 0x0f, 0x0a, 0x50, 0x32, 0x32, 0xb9, 0xec, 0x34, 0x12, 0x75,
	0x5c, 0x38, 0x8d, 0x71, 0x1d, 0x9d, 0x83, 0xd0, 0x84, 0x65, 0xad, 0x88, 0xc6, 0x7a, 0x01, 0x46,
	0x56, 0x70, 0xe7, 0xa0, 0x1c, 0xa9, 0xff, 0x51, 0xc6, 0x74, 0x36, 0xde, 0x2f, 0xb5, 0xc0, 0xbc,
	0x7c, 0x4d, 0xa9, 0x0d, 0x50, 0x05, 0x79, 0xe1, 0x06, 0x68, 0xd4, 0xfb, 0x64, 0x9c, 0xfd, 0xdd,
	0x3f, 0xcf, 0x6b, 0xc6, 0xeb, 0xf3, 0x9a, 0xf1, 0xcf, 0x79, 0xcd, 0xf8, 0xed, 0xa2, 0x36, 0xf3,
	0xfa, 0xa2, 0x36, 0xf3, 0xf7, 0x45, 0x6d, 0xe6, 0x9b, 0xea, 0x60, 0x3b, 0x75, 0xed, 0x59, 0x23,
	0x34, 0xe7, 0x8a, 0xcc, 0xb3, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x96, 0x36, 0x26,
	0xe7, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrontCacheServiceClient is the client API for FrontCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontCacheServiceClient interface {
	// companies
	ListCompanies(ctx context.Context, in *company.CompanyListRequest, opts ...grpc.CallOption) (*company.CompanyList, error)
	GetCompany(ctx context.Context, in *company.GetCompanyRequest, opts ...grpc.CallOption) (*company.Company, error)
	// teams
	ListTeams(ctx context.Context, in *company.TeamListRequest, opts ...grpc.CallOption) (*company.TeamList, error)
	GetTeam(ctx context.Context, in *company.GetTeamRequest, opts ...grpc.CallOption) (*company.Team, error)
	GetWorkerTeamInfo(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.Worker, error)
	// jobs
	ListJobs(ctx context.Context, in *company.JobListRequest, opts ...grpc.CallOption) (*company.JobList, error)
	GetJob(ctx context.Context, in *company.GetJobRequest, opts ...grpc.CallOption) (*company.Job, error)
	// Directory
	Directory(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.DirectoryList, error)
	GetAssociations(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.AssociationList, error)
	GetDirectoryEntry(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error)
	// Admins
	ListAdmins(ctx context.Context, in *company.AdminListRequest, opts ...grpc.CallOption) (*company.Admins, error)
	GetAdmin(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error)
	// Workers
	ListWorkers(ctx context.Context, in *company.WorkerListRequest, opts ...grpc.CallOption) (*company.Workers, error)
	GetWorker(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.DirectoryEntry, error)
	// Accounts
	ListAccounts(ctx context.Context, in *account.GetAccountListRequest, opts ...grpc.CallOption) (*account.AccountList, error)
	GetAccount(ctx context.Context, in *account.GetAccountRequest, opts ...grpc.CallOption) (*account.Account, error)
	InvalidateWorkersCache(ctx context.Context, in *InvalidateWorkersCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateJobsCache(ctx context.Context, in *InvalidateJobsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateJobCache(ctx context.Context, in *InvalidateJobCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateCompanyCache(ctx context.Context, in *InvalidateCompanyCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateTeamsCache(ctx context.Context, in *InvalidateTeamsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateTeamCache(ctx context.Context, in *InvalidateTeamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateAdminsCache(ctx context.Context, in *InvalidateAdminsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateWorkerteamCache(ctx context.Context, in *InvalidateWorkerteamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InvalidateAccountCache(ctx context.Context, in *InvalidateAccountCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type frontCacheServiceClient struct {
	cc *grpc.ClientConn
}

func NewFrontCacheServiceClient(cc *grpc.ClientConn) FrontCacheServiceClient {
	return &frontCacheServiceClient{cc}
}

func (c *frontCacheServiceClient) ListCompanies(ctx context.Context, in *company.CompanyListRequest, opts ...grpc.CallOption) (*company.CompanyList, error) {
	out := new(company.CompanyList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetCompany(ctx context.Context, in *company.GetCompanyRequest, opts ...grpc.CallOption) (*company.Company, error) {
	out := new(company.Company)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListTeams(ctx context.Context, in *company.TeamListRequest, opts ...grpc.CallOption) (*company.TeamList, error) {
	out := new(company.TeamList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetTeam(ctx context.Context, in *company.GetTeamRequest, opts ...grpc.CallOption) (*company.Team, error) {
	out := new(company.Team)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetWorkerTeamInfo(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.Worker, error) {
	out := new(company.Worker)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetWorkerTeamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListJobs(ctx context.Context, in *company.JobListRequest, opts ...grpc.CallOption) (*company.JobList, error) {
	out := new(company.JobList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetJob(ctx context.Context, in *company.GetJobRequest, opts ...grpc.CallOption) (*company.Job, error) {
	out := new(company.Job)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) Directory(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.DirectoryList, error) {
	out := new(company.DirectoryList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/Directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetAssociations(ctx context.Context, in *company.DirectoryListRequest, opts ...grpc.CallOption) (*company.AssociationList, error) {
	out := new(company.AssociationList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetDirectoryEntry(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error) {
	out := new(company.DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetDirectoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListAdmins(ctx context.Context, in *company.AdminListRequest, opts ...grpc.CallOption) (*company.Admins, error) {
	out := new(company.Admins)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetAdmin(ctx context.Context, in *company.DirectoryEntryRequest, opts ...grpc.CallOption) (*company.DirectoryEntry, error) {
	out := new(company.DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListWorkers(ctx context.Context, in *company.WorkerListRequest, opts ...grpc.CallOption) (*company.Workers, error) {
	out := new(company.Workers)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetWorker(ctx context.Context, in *company.Worker, opts ...grpc.CallOption) (*company.DirectoryEntry, error) {
	out := new(company.DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) ListAccounts(ctx context.Context, in *account.GetAccountListRequest, opts ...grpc.CallOption) (*account.AccountList, error) {
	out := new(account.AccountList)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) GetAccount(ctx context.Context, in *account.GetAccountRequest, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateWorkersCache(ctx context.Context, in *InvalidateWorkersCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateWorkersCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateJobsCache(ctx context.Context, in *InvalidateJobsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateJobsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateJobCache(ctx context.Context, in *InvalidateJobCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateJobCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateCompanyCache(ctx context.Context, in *InvalidateCompanyCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateCompanyCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateTeamsCache(ctx context.Context, in *InvalidateTeamsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateTeamsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateTeamCache(ctx context.Context, in *InvalidateTeamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateTeamCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateAdminsCache(ctx context.Context, in *InvalidateAdminsCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateAdminsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateWorkerteamCache(ctx context.Context, in *InvalidateWorkerteamCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateWorkerteamCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontCacheServiceClient) InvalidateAccountCache(ctx context.Context, in *InvalidateAccountCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.frontcache.FrontCacheService/InvalidateAccountCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontCacheServiceServer is the server API for FrontCacheService service.
type FrontCacheServiceServer interface {
	// companies
	ListCompanies(context.Context, *company.CompanyListRequest) (*company.CompanyList, error)
	GetCompany(context.Context, *company.GetCompanyRequest) (*company.Company, error)
	// teams
	ListTeams(context.Context, *company.TeamListRequest) (*company.TeamList, error)
	GetTeam(context.Context, *company.GetTeamRequest) (*company.Team, error)
	GetWorkerTeamInfo(context.Context, *company.Worker) (*company.Worker, error)
	// jobs
	ListJobs(context.Context, *company.JobListRequest) (*company.JobList, error)
	GetJob(context.Context, *company.GetJobRequest) (*company.Job, error)
	// Directory
	Directory(context.Context, *company.DirectoryListRequest) (*company.DirectoryList, error)
	GetAssociations(context.Context, *company.DirectoryListRequest) (*company.AssociationList, error)
	GetDirectoryEntry(context.Context, *company.DirectoryEntryRequest) (*company.DirectoryEntry, error)
	// Admins
	ListAdmins(context.Context, *company.AdminListRequest) (*company.Admins, error)
	GetAdmin(context.Context, *company.DirectoryEntryRequest) (*company.DirectoryEntry, error)
	// Workers
	ListWorkers(context.Context, *company.WorkerListRequest) (*company.Workers, error)
	GetWorker(context.Context, *company.Worker) (*company.DirectoryEntry, error)
	// Accounts
	ListAccounts(context.Context, *account.GetAccountListRequest) (*account.AccountList, error)
	GetAccount(context.Context, *account.GetAccountRequest) (*account.Account, error)
	InvalidateWorkersCache(context.Context, *InvalidateWorkersCacheRequest) (*emptypb.Empty, error)
	InvalidateJobsCache(context.Context, *InvalidateJobsCacheRequest) (*emptypb.Empty, error)
	InvalidateJobCache(context.Context, *InvalidateJobCacheRequest) (*emptypb.Empty, error)
	InvalidateCompanyCache(context.Context, *InvalidateCompanyCacheRequest) (*emptypb.Empty, error)
	InvalidateTeamsCache(context.Context, *InvalidateTeamsCacheRequest) (*emptypb.Empty, error)
	InvalidateTeamCache(context.Context, *InvalidateTeamCacheRequest) (*emptypb.Empty, error)
	InvalidateAdminsCache(context.Context, *InvalidateAdminsCacheRequest) (*emptypb.Empty, error)
	InvalidateWorkerteamCache(context.Context, *InvalidateWorkerteamCacheRequest) (*emptypb.Empty, error)
	InvalidateAccountCache(context.Context, *InvalidateAccountCacheRequest) (*emptypb.Empty, error)
}

// UnimplementedFrontCacheServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFrontCacheServiceServer struct {
}

func (*UnimplementedFrontCacheServiceServer) ListCompanies(ctx context.Context, req *company.CompanyListRequest) (*company.CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetCompany(ctx context.Context, req *company.GetCompanyRequest) (*company.Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListTeams(ctx context.Context, req *company.TeamListRequest) (*company.TeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetTeam(ctx context.Context, req *company.GetTeamRequest) (*company.Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetWorkerTeamInfo(ctx context.Context, req *company.Worker) (*company.Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerTeamInfo not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListJobs(ctx context.Context, req *company.JobListRequest) (*company.JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetJob(ctx context.Context, req *company.GetJobRequest) (*company.Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedFrontCacheServiceServer) Directory(ctx context.Context, req *company.DirectoryListRequest) (*company.DirectoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Directory not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetAssociations(ctx context.Context, req *company.DirectoryListRequest) (*company.AssociationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociations not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetDirectoryEntry(ctx context.Context, req *company.DirectoryEntryRequest) (*company.DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryEntry not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListAdmins(ctx context.Context, req *company.AdminListRequest) (*company.Admins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmins not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetAdmin(ctx context.Context, req *company.DirectoryEntryRequest) (*company.DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListWorkers(ctx context.Context, req *company.WorkerListRequest) (*company.Workers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetWorker(ctx context.Context, req *company.Worker) (*company.DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (*UnimplementedFrontCacheServiceServer) ListAccounts(ctx context.Context, req *account.GetAccountListRequest) (*account.AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedFrontCacheServiceServer) GetAccount(ctx context.Context, req *account.GetAccountRequest) (*account.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateWorkersCache(ctx context.Context, req *InvalidateWorkersCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateWorkersCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateJobsCache(ctx context.Context, req *InvalidateJobsCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateJobsCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateJobCache(ctx context.Context, req *InvalidateJobCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateJobCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateCompanyCache(ctx context.Context, req *InvalidateCompanyCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateCompanyCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateTeamsCache(ctx context.Context, req *InvalidateTeamsCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateTeamsCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateTeamCache(ctx context.Context, req *InvalidateTeamCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateTeamCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateAdminsCache(ctx context.Context, req *InvalidateAdminsCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAdminsCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateWorkerteamCache(ctx context.Context, req *InvalidateWorkerteamCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateWorkerteamCache not implemented")
}
func (*UnimplementedFrontCacheServiceServer) InvalidateAccountCache(ctx context.Context, req *InvalidateAccountCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAccountCache not implemented")
}

func RegisterFrontCacheServiceServer(s *grpc.Server, srv FrontCacheServiceServer) {
	s.RegisterService(&_FrontCacheService_serviceDesc, srv)
}

func _FrontCacheService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListCompanies(ctx, req.(*company.CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetCompany(ctx, req.(*company.GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.TeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListTeams(ctx, req.(*company.TeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetTeam(ctx, req.(*company.GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetWorkerTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetWorkerTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetWorkerTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetWorkerTeamInfo(ctx, req.(*company.Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListJobs(ctx, req.(*company.JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetJob(ctx, req.(*company.GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).Directory(ctx, req.(*company.DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetAssociations(ctx, req.(*company.DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetDirectoryEntry(ctx, req.(*company.DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListAdmins(ctx, req.(*company.AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetAdmin(ctx, req.(*company.DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.WorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListWorkers(ctx, req.(*company.WorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(company.Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetWorker(ctx, req.(*company.Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GetAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).ListAccounts(ctx, req.(*account.GetAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).GetAccount(ctx, req.(*account.GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateWorkersCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateWorkersCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateWorkersCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateWorkersCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateWorkersCache(ctx, req.(*InvalidateWorkersCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateJobsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateJobsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateJobsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateJobsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateJobsCache(ctx, req.(*InvalidateJobsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateJobCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateJobCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateJobCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateJobCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateJobCache(ctx, req.(*InvalidateJobCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateCompanyCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateCompanyCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateCompanyCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateCompanyCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateCompanyCache(ctx, req.(*InvalidateCompanyCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateTeamsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTeamsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateTeamsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateTeamsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateTeamsCache(ctx, req.(*InvalidateTeamsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateTeamCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateTeamCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateTeamCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateTeamCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateTeamCache(ctx, req.(*InvalidateTeamCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateAdminsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAdminsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateAdminsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateAdminsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateAdminsCache(ctx, req.(*InvalidateAdminsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateWorkerteamCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateWorkerteamCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateWorkerteamCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateWorkerteamCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateWorkerteamCache(ctx, req.(*InvalidateWorkerteamCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontCacheService_InvalidateAccountCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAccountCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontCacheServiceServer).InvalidateAccountCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.frontcache.FrontCacheService/InvalidateAccountCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontCacheServiceServer).InvalidateAccountCache(ctx, req.(*InvalidateAccountCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontCacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.frontcache.FrontCacheService",
	HandlerType: (*FrontCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCompanies",
			Handler:    _FrontCacheService_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _FrontCacheService_GetCompany_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _FrontCacheService_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _FrontCacheService_GetTeam_Handler,
		},
		{
			MethodName: "GetWorkerTeamInfo",
			Handler:    _FrontCacheService_GetWorkerTeamInfo_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _FrontCacheService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _FrontCacheService_GetJob_Handler,
		},
		{
			MethodName: "Directory",
			Handler:    _FrontCacheService_Directory_Handler,
		},
		{
			MethodName: "GetAssociations",
			Handler:    _FrontCacheService_GetAssociations_Handler,
		},
		{
			MethodName: "GetDirectoryEntry",
			Handler:    _FrontCacheService_GetDirectoryEntry_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _FrontCacheService_ListAdmins_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _FrontCacheService_GetAdmin_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _FrontCacheService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _FrontCacheService_GetWorker_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _FrontCacheService_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _FrontCacheService_GetAccount_Handler,
		},
		{
			MethodName: "InvalidateWorkersCache",
			Handler:    _FrontCacheService_InvalidateWorkersCache_Handler,
		},
		{
			MethodName: "InvalidateJobsCache",
			Handler:    _FrontCacheService_InvalidateJobsCache_Handler,
		},
		{
			MethodName: "InvalidateJobCache",
			Handler:    _FrontCacheService_InvalidateJobCache_Handler,
		},
		{
			MethodName: "InvalidateCompanyCache",
			Handler:    _FrontCacheService_InvalidateCompanyCache_Handler,
		},
		{
			MethodName: "InvalidateTeamsCache",
			Handler:    _FrontCacheService_InvalidateTeamsCache_Handler,
		},
		{
			MethodName: "InvalidateTeamCache",
			Handler:    _FrontCacheService_InvalidateTeamCache_Handler,
		},
		{
			MethodName: "InvalidateAdminsCache",
			Handler:    _FrontCacheService_InvalidateAdminsCache_Handler,
		},
		{
			MethodName: "InvalidateWorkerteamCache",
			Handler:    _FrontCacheService_InvalidateWorkerteamCache_Handler,
		},
		{
			MethodName: "InvalidateAccountCache",
			Handler:    _FrontCacheService_InvalidateAccountCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontcache.proto",
}

func (m *InvalidateWorkersCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateWorkersCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateWorkersCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateJobsCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateJobsCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateJobsCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateJobCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateJobCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateJobCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JobUuid) > 0 {
		i -= len(m.JobUuid)
		copy(dAtA[i:], m.JobUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.JobUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateCompanyCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateCompanyCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateCompanyCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateTeamsCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateTeamsCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateTeamsCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateTeamCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateTeamCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateTeamCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeamUuid) > 0 {
		i -= len(m.TeamUuid)
		copy(dAtA[i:], m.TeamUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.TeamUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateAdminsCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateAdminsCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateAdminsCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompanyUuid) > 0 {
		i -= len(m.CompanyUuid)
		copy(dAtA[i:], m.CompanyUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.CompanyUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateWorkerteamCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateWorkerteamCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateWorkerteamCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerUuid) > 0 {
		i -= len(m.WorkerUuid)
		copy(dAtA[i:], m.WorkerUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.WorkerUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidateAccountCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateAccountCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidateAccountCacheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountUuid) > 0 {
		i -= len(m.AccountUuid)
		copy(dAtA[i:], m.AccountUuid)
		i = encodeVarintFrontcache(dAtA, i, uint64(len(m.AccountUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrontcache(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrontcache(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InvalidateWorkersCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateJobsCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateJobCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateCompanyCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateTeamsCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateTeamCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateAdminsCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateWorkerteamCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func (m *InvalidateAccountCacheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountUuid)
	if l > 0 {
		n += 1 + l + sovFrontcache(uint64(l))
	}
	return n
}

func sovFrontcache(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrontcache(x uint64) (n int) {
	return sovFrontcache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InvalidateWorkersCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateWorkersCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateWorkersCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateJobsCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateJobsCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateJobsCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateJobCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateJobCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateJobCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateCompanyCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateCompanyCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateCompanyCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateTeamsCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateTeamsCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateTeamsCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateTeamCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateTeamCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateTeamCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateAdminsCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateAdminsCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateAdminsCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateWorkerteamCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateWorkerteamCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateWorkerteamCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateAccountCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateAccountCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateAccountCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrontcache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrontcache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrontcache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrontcache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrontcache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrontcache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrontcache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrontcache
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrontcache
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrontcache
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrontcache        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrontcache          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrontcache = fmt.Errorf("proto: unexpected end of group")
)
